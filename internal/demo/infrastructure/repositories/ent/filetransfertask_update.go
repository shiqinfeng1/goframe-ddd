// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/demo/infrastructure/repositories/ent/filetransfertask"
	"github.com/shiqinfeng1/goframe-ddd/internal/demo/infrastructure/repositories/ent/predicate"
)

// FileTransferTaskUpdate is the builder for updating FileTransferTask entities.
type FileTransferTaskUpdate struct {
	config
	hooks    []Hook
	mutation *FileTransferTaskMutation
}

// Where appends a list predicates to the FileTransferTaskUpdate builder.
func (fttu *FileTransferTaskUpdate) Where(ps ...predicate.FileTransferTask) *FileTransferTaskUpdate {
	fttu.mutation.Where(ps...)
	return fttu
}

// SetTaskID sets the "task_id" field.
func (fttu *FileTransferTaskUpdate) SetTaskID(s string) *FileTransferTaskUpdate {
	fttu.mutation.SetTaskID(s)
	return fttu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (fttu *FileTransferTaskUpdate) SetNillableTaskID(s *string) *FileTransferTaskUpdate {
	if s != nil {
		fttu.SetTaskID(*s)
	}
	return fttu
}

// SetTaskName sets the "task_name" field.
func (fttu *FileTransferTaskUpdate) SetTaskName(s string) *FileTransferTaskUpdate {
	fttu.mutation.SetTaskName(s)
	return fttu
}

// SetNillableTaskName sets the "task_name" field if the given value is not nil.
func (fttu *FileTransferTaskUpdate) SetNillableTaskName(s *string) *FileTransferTaskUpdate {
	if s != nil {
		fttu.SetTaskName(*s)
	}
	return fttu
}

// SetNodeID sets the "node_id" field.
func (fttu *FileTransferTaskUpdate) SetNodeID(s string) *FileTransferTaskUpdate {
	fttu.mutation.SetNodeID(s)
	return fttu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (fttu *FileTransferTaskUpdate) SetNillableNodeID(s *string) *FileTransferTaskUpdate {
	if s != nil {
		fttu.SetNodeID(*s)
	}
	return fttu
}

// SetStatus sets the "status" field.
func (fttu *FileTransferTaskUpdate) SetStatus(i int) *FileTransferTaskUpdate {
	fttu.mutation.ResetStatus()
	fttu.mutation.SetStatus(i)
	return fttu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fttu *FileTransferTaskUpdate) SetNillableStatus(i *int) *FileTransferTaskUpdate {
	if i != nil {
		fttu.SetStatus(*i)
	}
	return fttu
}

// AddStatus adds i to the "status" field.
func (fttu *FileTransferTaskUpdate) AddStatus(i int) *FileTransferTaskUpdate {
	fttu.mutation.AddStatus(i)
	return fttu
}

// SetElapsed sets the "elapsed" field.
func (fttu *FileTransferTaskUpdate) SetElapsed(s string) *FileTransferTaskUpdate {
	fttu.mutation.SetElapsed(s)
	return fttu
}

// SetNillableElapsed sets the "elapsed" field if the given value is not nil.
func (fttu *FileTransferTaskUpdate) SetNillableElapsed(s *string) *FileTransferTaskUpdate {
	if s != nil {
		fttu.SetElapsed(*s)
	}
	return fttu
}

// SetSpeed sets the "speed" field.
func (fttu *FileTransferTaskUpdate) SetSpeed(s string) *FileTransferTaskUpdate {
	fttu.mutation.SetSpeed(s)
	return fttu
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (fttu *FileTransferTaskUpdate) SetNillableSpeed(s *string) *FileTransferTaskUpdate {
	if s != nil {
		fttu.SetSpeed(*s)
	}
	return fttu
}

// SetUpdatedAt sets the "updated_at" field.
func (fttu *FileTransferTaskUpdate) SetUpdatedAt(t time.Time) *FileTransferTaskUpdate {
	fttu.mutation.SetUpdatedAt(t)
	return fttu
}

// Mutation returns the FileTransferTaskMutation object of the builder.
func (fttu *FileTransferTaskUpdate) Mutation() *FileTransferTaskMutation {
	return fttu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fttu *FileTransferTaskUpdate) Save(ctx context.Context) (int, error) {
	fttu.defaults()
	return withHooks(ctx, fttu.sqlSave, fttu.mutation, fttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fttu *FileTransferTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := fttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fttu *FileTransferTaskUpdate) Exec(ctx context.Context) error {
	_, err := fttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fttu *FileTransferTaskUpdate) ExecX(ctx context.Context) {
	if err := fttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fttu *FileTransferTaskUpdate) defaults() {
	if _, ok := fttu.mutation.UpdatedAt(); !ok {
		v := filetransfertask.UpdateDefaultUpdatedAt()
		fttu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fttu *FileTransferTaskUpdate) check() error {
	if v, ok := fttu.mutation.TaskID(); ok {
		if err := filetransfertask.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.task_id": %w`, err)}
		}
	}
	if v, ok := fttu.mutation.TaskName(); ok {
		if err := filetransfertask.TaskNameValidator(v); err != nil {
			return &ValidationError{Name: "task_name", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.task_name": %w`, err)}
		}
	}
	if v, ok := fttu.mutation.NodeID(); ok {
		if err := filetransfertask.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.node_id": %w`, err)}
		}
	}
	if v, ok := fttu.mutation.Elapsed(); ok {
		if err := filetransfertask.ElapsedValidator(v); err != nil {
			return &ValidationError{Name: "elapsed", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.elapsed": %w`, err)}
		}
	}
	if v, ok := fttu.mutation.Speed(); ok {
		if err := filetransfertask.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.speed": %w`, err)}
		}
	}
	return nil
}

func (fttu *FileTransferTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(filetransfertask.Table, filetransfertask.Columns, sqlgraph.NewFieldSpec(filetransfertask.FieldID, field.TypeInt))
	if ps := fttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fttu.mutation.TaskID(); ok {
		_spec.SetField(filetransfertask.FieldTaskID, field.TypeString, value)
	}
	if value, ok := fttu.mutation.TaskName(); ok {
		_spec.SetField(filetransfertask.FieldTaskName, field.TypeString, value)
	}
	if value, ok := fttu.mutation.NodeID(); ok {
		_spec.SetField(filetransfertask.FieldNodeID, field.TypeString, value)
	}
	if value, ok := fttu.mutation.Status(); ok {
		_spec.SetField(filetransfertask.FieldStatus, field.TypeInt, value)
	}
	if value, ok := fttu.mutation.AddedStatus(); ok {
		_spec.AddField(filetransfertask.FieldStatus, field.TypeInt, value)
	}
	if value, ok := fttu.mutation.Elapsed(); ok {
		_spec.SetField(filetransfertask.FieldElapsed, field.TypeString, value)
	}
	if value, ok := fttu.mutation.Speed(); ok {
		_spec.SetField(filetransfertask.FieldSpeed, field.TypeString, value)
	}
	if value, ok := fttu.mutation.UpdatedAt(); ok {
		_spec.SetField(filetransfertask.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filetransfertask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fttu.mutation.done = true
	return n, nil
}

// FileTransferTaskUpdateOne is the builder for updating a single FileTransferTask entity.
type FileTransferTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileTransferTaskMutation
}

// SetTaskID sets the "task_id" field.
func (fttuo *FileTransferTaskUpdateOne) SetTaskID(s string) *FileTransferTaskUpdateOne {
	fttuo.mutation.SetTaskID(s)
	return fttuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (fttuo *FileTransferTaskUpdateOne) SetNillableTaskID(s *string) *FileTransferTaskUpdateOne {
	if s != nil {
		fttuo.SetTaskID(*s)
	}
	return fttuo
}

// SetTaskName sets the "task_name" field.
func (fttuo *FileTransferTaskUpdateOne) SetTaskName(s string) *FileTransferTaskUpdateOne {
	fttuo.mutation.SetTaskName(s)
	return fttuo
}

// SetNillableTaskName sets the "task_name" field if the given value is not nil.
func (fttuo *FileTransferTaskUpdateOne) SetNillableTaskName(s *string) *FileTransferTaskUpdateOne {
	if s != nil {
		fttuo.SetTaskName(*s)
	}
	return fttuo
}

// SetNodeID sets the "node_id" field.
func (fttuo *FileTransferTaskUpdateOne) SetNodeID(s string) *FileTransferTaskUpdateOne {
	fttuo.mutation.SetNodeID(s)
	return fttuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (fttuo *FileTransferTaskUpdateOne) SetNillableNodeID(s *string) *FileTransferTaskUpdateOne {
	if s != nil {
		fttuo.SetNodeID(*s)
	}
	return fttuo
}

// SetStatus sets the "status" field.
func (fttuo *FileTransferTaskUpdateOne) SetStatus(i int) *FileTransferTaskUpdateOne {
	fttuo.mutation.ResetStatus()
	fttuo.mutation.SetStatus(i)
	return fttuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fttuo *FileTransferTaskUpdateOne) SetNillableStatus(i *int) *FileTransferTaskUpdateOne {
	if i != nil {
		fttuo.SetStatus(*i)
	}
	return fttuo
}

// AddStatus adds i to the "status" field.
func (fttuo *FileTransferTaskUpdateOne) AddStatus(i int) *FileTransferTaskUpdateOne {
	fttuo.mutation.AddStatus(i)
	return fttuo
}

// SetElapsed sets the "elapsed" field.
func (fttuo *FileTransferTaskUpdateOne) SetElapsed(s string) *FileTransferTaskUpdateOne {
	fttuo.mutation.SetElapsed(s)
	return fttuo
}

// SetNillableElapsed sets the "elapsed" field if the given value is not nil.
func (fttuo *FileTransferTaskUpdateOne) SetNillableElapsed(s *string) *FileTransferTaskUpdateOne {
	if s != nil {
		fttuo.SetElapsed(*s)
	}
	return fttuo
}

// SetSpeed sets the "speed" field.
func (fttuo *FileTransferTaskUpdateOne) SetSpeed(s string) *FileTransferTaskUpdateOne {
	fttuo.mutation.SetSpeed(s)
	return fttuo
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (fttuo *FileTransferTaskUpdateOne) SetNillableSpeed(s *string) *FileTransferTaskUpdateOne {
	if s != nil {
		fttuo.SetSpeed(*s)
	}
	return fttuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fttuo *FileTransferTaskUpdateOne) SetUpdatedAt(t time.Time) *FileTransferTaskUpdateOne {
	fttuo.mutation.SetUpdatedAt(t)
	return fttuo
}

// Mutation returns the FileTransferTaskMutation object of the builder.
func (fttuo *FileTransferTaskUpdateOne) Mutation() *FileTransferTaskMutation {
	return fttuo.mutation
}

// Where appends a list predicates to the FileTransferTaskUpdate builder.
func (fttuo *FileTransferTaskUpdateOne) Where(ps ...predicate.FileTransferTask) *FileTransferTaskUpdateOne {
	fttuo.mutation.Where(ps...)
	return fttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fttuo *FileTransferTaskUpdateOne) Select(field string, fields ...string) *FileTransferTaskUpdateOne {
	fttuo.fields = append([]string{field}, fields...)
	return fttuo
}

// Save executes the query and returns the updated FileTransferTask entity.
func (fttuo *FileTransferTaskUpdateOne) Save(ctx context.Context) (*FileTransferTask, error) {
	fttuo.defaults()
	return withHooks(ctx, fttuo.sqlSave, fttuo.mutation, fttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fttuo *FileTransferTaskUpdateOne) SaveX(ctx context.Context) *FileTransferTask {
	node, err := fttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fttuo *FileTransferTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := fttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fttuo *FileTransferTaskUpdateOne) ExecX(ctx context.Context) {
	if err := fttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fttuo *FileTransferTaskUpdateOne) defaults() {
	if _, ok := fttuo.mutation.UpdatedAt(); !ok {
		v := filetransfertask.UpdateDefaultUpdatedAt()
		fttuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fttuo *FileTransferTaskUpdateOne) check() error {
	if v, ok := fttuo.mutation.TaskID(); ok {
		if err := filetransfertask.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.task_id": %w`, err)}
		}
	}
	if v, ok := fttuo.mutation.TaskName(); ok {
		if err := filetransfertask.TaskNameValidator(v); err != nil {
			return &ValidationError{Name: "task_name", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.task_name": %w`, err)}
		}
	}
	if v, ok := fttuo.mutation.NodeID(); ok {
		if err := filetransfertask.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.node_id": %w`, err)}
		}
	}
	if v, ok := fttuo.mutation.Elapsed(); ok {
		if err := filetransfertask.ElapsedValidator(v); err != nil {
			return &ValidationError{Name: "elapsed", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.elapsed": %w`, err)}
		}
	}
	if v, ok := fttuo.mutation.Speed(); ok {
		if err := filetransfertask.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.speed": %w`, err)}
		}
	}
	return nil
}

func (fttuo *FileTransferTaskUpdateOne) sqlSave(ctx context.Context) (_node *FileTransferTask, err error) {
	if err := fttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filetransfertask.Table, filetransfertask.Columns, sqlgraph.NewFieldSpec(filetransfertask.FieldID, field.TypeInt))
	id, ok := fttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileTransferTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filetransfertask.FieldID)
		for _, f := range fields {
			if !filetransfertask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filetransfertask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fttuo.mutation.TaskID(); ok {
		_spec.SetField(filetransfertask.FieldTaskID, field.TypeString, value)
	}
	if value, ok := fttuo.mutation.TaskName(); ok {
		_spec.SetField(filetransfertask.FieldTaskName, field.TypeString, value)
	}
	if value, ok := fttuo.mutation.NodeID(); ok {
		_spec.SetField(filetransfertask.FieldNodeID, field.TypeString, value)
	}
	if value, ok := fttuo.mutation.Status(); ok {
		_spec.SetField(filetransfertask.FieldStatus, field.TypeInt, value)
	}
	if value, ok := fttuo.mutation.AddedStatus(); ok {
		_spec.AddField(filetransfertask.FieldStatus, field.TypeInt, value)
	}
	if value, ok := fttuo.mutation.Elapsed(); ok {
		_spec.SetField(filetransfertask.FieldElapsed, field.TypeString, value)
	}
	if value, ok := fttuo.mutation.Speed(); ok {
		_spec.SetField(filetransfertask.FieldSpeed, field.TypeString, value)
	}
	if value, ok := fttuo.mutation.UpdatedAt(); ok {
		_spec.SetField(filetransfertask.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &FileTransferTask{config: fttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filetransfertask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fttuo.mutation.done = true
	return _node, nil
}
