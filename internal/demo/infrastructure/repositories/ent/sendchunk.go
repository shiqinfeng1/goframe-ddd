// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shiqinfeng1/goframe-ddd/internal/demo/infrastructure/repositories/ent/sendchunk"
	"github.com/shiqinfeng1/goframe-ddd/internal/demo/infrastructure/repositories/ent/sendfile"
)

// SendChunk is the model entity for the SendChunk schema.
type SendChunk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SendfileID holds the value of the "sendfile_id" field.
	SendfileID int `json:"sendfile_id,omitempty"`
	// ChunkIndex holds the value of the "chunk_index" field.
	ChunkIndex int `json:"chunk_index,omitempty"`
	// ChunkOffset holds the value of the "chunk_offset" field.
	ChunkOffset int64 `json:"chunk_offset,omitempty"`
	// ChunkSize holds the value of the "chunk_size" field.
	ChunkSize int `json:"chunk_size,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SendChunkQuery when eager-loading is set.
	Edges        SendChunkEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SendChunkEdges holds the relations/edges for other nodes in the graph.
type SendChunkEdges struct {
	// SendFile holds the value of the send_file edge.
	SendFile *SendFile `json:"send_file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SendFileOrErr returns the SendFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SendChunkEdges) SendFileOrErr() (*SendFile, error) {
	if e.SendFile != nil {
		return e.SendFile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sendfile.Label}
	}
	return nil, &NotLoadedError{edge: "send_file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SendChunk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sendchunk.FieldID, sendchunk.FieldSendfileID, sendchunk.FieldChunkIndex, sendchunk.FieldChunkOffset, sendchunk.FieldChunkSize:
			values[i] = new(sql.NullInt64)
		case sendchunk.FieldUpdatedAt, sendchunk.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SendChunk fields.
func (sc *SendChunk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sendchunk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case sendchunk.FieldSendfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sendfile_id", values[i])
			} else if value.Valid {
				sc.SendfileID = int(value.Int64)
			}
		case sendchunk.FieldChunkIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chunk_index", values[i])
			} else if value.Valid {
				sc.ChunkIndex = int(value.Int64)
			}
		case sendchunk.FieldChunkOffset:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chunk_offset", values[i])
			} else if value.Valid {
				sc.ChunkOffset = value.Int64
			}
		case sendchunk.FieldChunkSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chunk_size", values[i])
			} else if value.Valid {
				sc.ChunkSize = int(value.Int64)
			}
		case sendchunk.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case sendchunk.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SendChunk.
// This includes values selected through modifiers, order, etc.
func (sc *SendChunk) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QuerySendFile queries the "send_file" edge of the SendChunk entity.
func (sc *SendChunk) QuerySendFile() *SendFileQuery {
	return NewSendChunkClient(sc.config).QuerySendFile(sc)
}

// Update returns a builder for updating this SendChunk.
// Note that you need to call SendChunk.Unwrap() before calling this method if this SendChunk
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SendChunk) Update() *SendChunkUpdateOne {
	return NewSendChunkClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SendChunk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SendChunk) Unwrap() *SendChunk {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SendChunk is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SendChunk) String() string {
	var builder strings.Builder
	builder.WriteString("SendChunk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("sendfile_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.SendfileID))
	builder.WriteString(", ")
	builder.WriteString("chunk_index=")
	builder.WriteString(fmt.Sprintf("%v", sc.ChunkIndex))
	builder.WriteString(", ")
	builder.WriteString("chunk_offset=")
	builder.WriteString(fmt.Sprintf("%v", sc.ChunkOffset))
	builder.WriteString(", ")
	builder.WriteString("chunk_size=")
	builder.WriteString(fmt.Sprintf("%v", sc.ChunkSize))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SendChunks is a parsable slice of SendChunk.
type SendChunks []*SendChunk
