// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/demo/infrastructure/repositories/ent/recvchunk"
	"github.com/shiqinfeng1/goframe-ddd/internal/demo/infrastructure/repositories/ent/recvfile"
)

// RecvFileCreate is the builder for creating a RecvFile entity.
type RecvFileCreate struct {
	config
	mutation *RecvFileMutation
	hooks    []Hook
}

// SetTaskID sets the "task_id" field.
func (rfc *RecvFileCreate) SetTaskID(s string) *RecvFileCreate {
	rfc.mutation.SetTaskID(s)
	return rfc
}

// SetTaskName sets the "task_name" field.
func (rfc *RecvFileCreate) SetTaskName(s string) *RecvFileCreate {
	rfc.mutation.SetTaskName(s)
	return rfc
}

// SetFilePathSave sets the "file_path_save" field.
func (rfc *RecvFileCreate) SetFilePathSave(s string) *RecvFileCreate {
	rfc.mutation.SetFilePathSave(s)
	return rfc
}

// SetFilePathOrigin sets the "file_path_origin" field.
func (rfc *RecvFileCreate) SetFilePathOrigin(s string) *RecvFileCreate {
	rfc.mutation.SetFilePathOrigin(s)
	return rfc
}

// SetFileID sets the "file_id" field.
func (rfc *RecvFileCreate) SetFileID(s string) *RecvFileCreate {
	rfc.mutation.SetFileID(s)
	return rfc
}

// SetFileSize sets the "file_size" field.
func (rfc *RecvFileCreate) SetFileSize(i int64) *RecvFileCreate {
	rfc.mutation.SetFileSize(i)
	return rfc
}

// SetChunkNumTotal sets the "chunk_num_total" field.
func (rfc *RecvFileCreate) SetChunkNumTotal(i int) *RecvFileCreate {
	rfc.mutation.SetChunkNumTotal(i)
	return rfc
}

// SetChunkNumRecved sets the "chunk_num_recved" field.
func (rfc *RecvFileCreate) SetChunkNumRecved(i int) *RecvFileCreate {
	rfc.mutation.SetChunkNumRecved(i)
	return rfc
}

// SetNillableChunkNumRecved sets the "chunk_num_recved" field if the given value is not nil.
func (rfc *RecvFileCreate) SetNillableChunkNumRecved(i *int) *RecvFileCreate {
	if i != nil {
		rfc.SetChunkNumRecved(*i)
	}
	return rfc
}

// SetStatus sets the "status" field.
func (rfc *RecvFileCreate) SetStatus(i int) *RecvFileCreate {
	rfc.mutation.SetStatus(i)
	return rfc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rfc *RecvFileCreate) SetNillableStatus(i *int) *RecvFileCreate {
	if i != nil {
		rfc.SetStatus(*i)
	}
	return rfc
}

// SetUpdatedAt sets the "updated_at" field.
func (rfc *RecvFileCreate) SetUpdatedAt(t time.Time) *RecvFileCreate {
	rfc.mutation.SetUpdatedAt(t)
	return rfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rfc *RecvFileCreate) SetNillableUpdatedAt(t *time.Time) *RecvFileCreate {
	if t != nil {
		rfc.SetUpdatedAt(*t)
	}
	return rfc
}

// SetCreatedAt sets the "created_at" field.
func (rfc *RecvFileCreate) SetCreatedAt(t time.Time) *RecvFileCreate {
	rfc.mutation.SetCreatedAt(t)
	return rfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rfc *RecvFileCreate) SetNillableCreatedAt(t *time.Time) *RecvFileCreate {
	if t != nil {
		rfc.SetCreatedAt(*t)
	}
	return rfc
}

// AddRecvChunkIDs adds the "recv_chunks" edge to the RecvChunk entity by IDs.
func (rfc *RecvFileCreate) AddRecvChunkIDs(ids ...int) *RecvFileCreate {
	rfc.mutation.AddRecvChunkIDs(ids...)
	return rfc
}

// AddRecvChunks adds the "recv_chunks" edges to the RecvChunk entity.
func (rfc *RecvFileCreate) AddRecvChunks(r ...*RecvChunk) *RecvFileCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfc.AddRecvChunkIDs(ids...)
}

// Mutation returns the RecvFileMutation object of the builder.
func (rfc *RecvFileCreate) Mutation() *RecvFileMutation {
	return rfc.mutation
}

// Save creates the RecvFile in the database.
func (rfc *RecvFileCreate) Save(ctx context.Context) (*RecvFile, error) {
	rfc.defaults()
	return withHooks(ctx, rfc.sqlSave, rfc.mutation, rfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rfc *RecvFileCreate) SaveX(ctx context.Context) *RecvFile {
	v, err := rfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rfc *RecvFileCreate) Exec(ctx context.Context) error {
	_, err := rfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfc *RecvFileCreate) ExecX(ctx context.Context) {
	if err := rfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rfc *RecvFileCreate) defaults() {
	if _, ok := rfc.mutation.ChunkNumRecved(); !ok {
		v := recvfile.DefaultChunkNumRecved
		rfc.mutation.SetChunkNumRecved(v)
	}
	if _, ok := rfc.mutation.Status(); !ok {
		v := recvfile.DefaultStatus
		rfc.mutation.SetStatus(v)
	}
	if _, ok := rfc.mutation.UpdatedAt(); !ok {
		v := recvfile.DefaultUpdatedAt()
		rfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rfc.mutation.CreatedAt(); !ok {
		v := recvfile.DefaultCreatedAt()
		rfc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfc *RecvFileCreate) check() error {
	if _, ok := rfc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "RecvFile.task_id"`)}
	}
	if v, ok := rfc.mutation.TaskID(); ok {
		if err := recvfile.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "RecvFile.task_id": %w`, err)}
		}
	}
	if _, ok := rfc.mutation.TaskName(); !ok {
		return &ValidationError{Name: "task_name", err: errors.New(`ent: missing required field "RecvFile.task_name"`)}
	}
	if v, ok := rfc.mutation.TaskName(); ok {
		if err := recvfile.TaskNameValidator(v); err != nil {
			return &ValidationError{Name: "task_name", err: fmt.Errorf(`ent: validator failed for field "RecvFile.task_name": %w`, err)}
		}
	}
	if _, ok := rfc.mutation.FilePathSave(); !ok {
		return &ValidationError{Name: "file_path_save", err: errors.New(`ent: missing required field "RecvFile.file_path_save"`)}
	}
	if v, ok := rfc.mutation.FilePathSave(); ok {
		if err := recvfile.FilePathSaveValidator(v); err != nil {
			return &ValidationError{Name: "file_path_save", err: fmt.Errorf(`ent: validator failed for field "RecvFile.file_path_save": %w`, err)}
		}
	}
	if _, ok := rfc.mutation.FilePathOrigin(); !ok {
		return &ValidationError{Name: "file_path_origin", err: errors.New(`ent: missing required field "RecvFile.file_path_origin"`)}
	}
	if v, ok := rfc.mutation.FilePathOrigin(); ok {
		if err := recvfile.FilePathOriginValidator(v); err != nil {
			return &ValidationError{Name: "file_path_origin", err: fmt.Errorf(`ent: validator failed for field "RecvFile.file_path_origin": %w`, err)}
		}
	}
	if _, ok := rfc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "RecvFile.file_id"`)}
	}
	if v, ok := rfc.mutation.FileID(); ok {
		if err := recvfile.FileIDValidator(v); err != nil {
			return &ValidationError{Name: "file_id", err: fmt.Errorf(`ent: validator failed for field "RecvFile.file_id": %w`, err)}
		}
	}
	if _, ok := rfc.mutation.FileSize(); !ok {
		return &ValidationError{Name: "file_size", err: errors.New(`ent: missing required field "RecvFile.file_size"`)}
	}
	if v, ok := rfc.mutation.FileSize(); ok {
		if err := recvfile.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "RecvFile.file_size": %w`, err)}
		}
	}
	if _, ok := rfc.mutation.ChunkNumTotal(); !ok {
		return &ValidationError{Name: "chunk_num_total", err: errors.New(`ent: missing required field "RecvFile.chunk_num_total"`)}
	}
	if v, ok := rfc.mutation.ChunkNumTotal(); ok {
		if err := recvfile.ChunkNumTotalValidator(v); err != nil {
			return &ValidationError{Name: "chunk_num_total", err: fmt.Errorf(`ent: validator failed for field "RecvFile.chunk_num_total": %w`, err)}
		}
	}
	if _, ok := rfc.mutation.ChunkNumRecved(); !ok {
		return &ValidationError{Name: "chunk_num_recved", err: errors.New(`ent: missing required field "RecvFile.chunk_num_recved"`)}
	}
	if _, ok := rfc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RecvFile.status"`)}
	}
	if _, ok := rfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RecvFile.updated_at"`)}
	}
	if _, ok := rfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RecvFile.created_at"`)}
	}
	return nil
}

func (rfc *RecvFileCreate) sqlSave(ctx context.Context) (*RecvFile, error) {
	if err := rfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rfc.mutation.id = &_node.ID
	rfc.mutation.done = true
	return _node, nil
}

func (rfc *RecvFileCreate) createSpec() (*RecvFile, *sqlgraph.CreateSpec) {
	var (
		_node = &RecvFile{config: rfc.config}
		_spec = sqlgraph.NewCreateSpec(recvfile.Table, sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt))
	)
	if value, ok := rfc.mutation.TaskID(); ok {
		_spec.SetField(recvfile.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := rfc.mutation.TaskName(); ok {
		_spec.SetField(recvfile.FieldTaskName, field.TypeString, value)
		_node.TaskName = value
	}
	if value, ok := rfc.mutation.FilePathSave(); ok {
		_spec.SetField(recvfile.FieldFilePathSave, field.TypeString, value)
		_node.FilePathSave = value
	}
	if value, ok := rfc.mutation.FilePathOrigin(); ok {
		_spec.SetField(recvfile.FieldFilePathOrigin, field.TypeString, value)
		_node.FilePathOrigin = value
	}
	if value, ok := rfc.mutation.FileID(); ok {
		_spec.SetField(recvfile.FieldFileID, field.TypeString, value)
		_node.FileID = value
	}
	if value, ok := rfc.mutation.FileSize(); ok {
		_spec.SetField(recvfile.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := rfc.mutation.ChunkNumTotal(); ok {
		_spec.SetField(recvfile.FieldChunkNumTotal, field.TypeInt, value)
		_node.ChunkNumTotal = value
	}
	if value, ok := rfc.mutation.ChunkNumRecved(); ok {
		_spec.SetField(recvfile.FieldChunkNumRecved, field.TypeInt, value)
		_node.ChunkNumRecved = value
	}
	if value, ok := rfc.mutation.Status(); ok {
		_spec.SetField(recvfile.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := rfc.mutation.UpdatedAt(); ok {
		_spec.SetField(recvfile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rfc.mutation.CreatedAt(); ok {
		_spec.SetField(recvfile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rfc.mutation.RecvChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recvfile.RecvChunksTable,
			Columns: []string{recvfile.RecvChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecvFileCreateBulk is the builder for creating many RecvFile entities in bulk.
type RecvFileCreateBulk struct {
	config
	err      error
	builders []*RecvFileCreate
}

// Save creates the RecvFile entities in the database.
func (rfcb *RecvFileCreateBulk) Save(ctx context.Context) ([]*RecvFile, error) {
	if rfcb.err != nil {
		return nil, rfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rfcb.builders))
	nodes := make([]*RecvFile, len(rfcb.builders))
	mutators := make([]Mutator, len(rfcb.builders))
	for i := range rfcb.builders {
		func(i int, root context.Context) {
			builder := rfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecvFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rfcb *RecvFileCreateBulk) SaveX(ctx context.Context) []*RecvFile {
	v, err := rfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rfcb *RecvFileCreateBulk) Exec(ctx context.Context) error {
	_, err := rfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfcb *RecvFileCreateBulk) ExecX(ctx context.Context) {
	if err := rfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
