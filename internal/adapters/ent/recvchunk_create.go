// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/recvchunk"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/recvfile"
)

// RecvChunkCreate is the builder for creating a RecvChunk entity.
type RecvChunkCreate struct {
	config
	mutation *RecvChunkMutation
	hooks    []Hook
}

// SetFileID sets the "file_id" field.
func (rcc *RecvChunkCreate) SetFileID(i int) *RecvChunkCreate {
	rcc.mutation.SetFileID(i)
	return rcc
}

// SetChunkIndex sets the "chunk_index" field.
func (rcc *RecvChunkCreate) SetChunkIndex(i int) *RecvChunkCreate {
	rcc.mutation.SetChunkIndex(i)
	return rcc
}

// SetNillableChunkIndex sets the "chunk_index" field if the given value is not nil.
func (rcc *RecvChunkCreate) SetNillableChunkIndex(i *int) *RecvChunkCreate {
	if i != nil {
		rcc.SetChunkIndex(*i)
	}
	return rcc
}

// SetChunkOffset sets the "chunk_offset" field.
func (rcc *RecvChunkCreate) SetChunkOffset(i int64) *RecvChunkCreate {
	rcc.mutation.SetChunkOffset(i)
	return rcc
}

// SetNillableChunkOffset sets the "chunk_offset" field if the given value is not nil.
func (rcc *RecvChunkCreate) SetNillableChunkOffset(i *int64) *RecvChunkCreate {
	if i != nil {
		rcc.SetChunkOffset(*i)
	}
	return rcc
}

// SetChunkSize sets the "chunk_size" field.
func (rcc *RecvChunkCreate) SetChunkSize(i int64) *RecvChunkCreate {
	rcc.mutation.SetChunkSize(i)
	return rcc
}

// SetNillableChunkSize sets the "chunk_size" field if the given value is not nil.
func (rcc *RecvChunkCreate) SetNillableChunkSize(i *int64) *RecvChunkCreate {
	if i != nil {
		rcc.SetChunkSize(*i)
	}
	return rcc
}

// SetStatus sets the "status" field.
func (rcc *RecvChunkCreate) SetStatus(i int) *RecvChunkCreate {
	rcc.mutation.SetStatus(i)
	return rcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcc *RecvChunkCreate) SetNillableStatus(i *int) *RecvChunkCreate {
	if i != nil {
		rcc.SetStatus(*i)
	}
	return rcc
}

// SetUpdatedAt sets the "updated_at" field.
func (rcc *RecvChunkCreate) SetUpdatedAt(t time.Time) *RecvChunkCreate {
	rcc.mutation.SetUpdatedAt(t)
	return rcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rcc *RecvChunkCreate) SetNillableUpdatedAt(t *time.Time) *RecvChunkCreate {
	if t != nil {
		rcc.SetUpdatedAt(*t)
	}
	return rcc
}

// SetCreatedAt sets the "created_at" field.
func (rcc *RecvChunkCreate) SetCreatedAt(t time.Time) *RecvChunkCreate {
	rcc.mutation.SetCreatedAt(t)
	return rcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcc *RecvChunkCreate) SetNillableCreatedAt(t *time.Time) *RecvChunkCreate {
	if t != nil {
		rcc.SetCreatedAt(*t)
	}
	return rcc
}

// SetRecvFileID sets the "recv_file" edge to the RecvFile entity by ID.
func (rcc *RecvChunkCreate) SetRecvFileID(id int) *RecvChunkCreate {
	rcc.mutation.SetRecvFileID(id)
	return rcc
}

// SetRecvFile sets the "recv_file" edge to the RecvFile entity.
func (rcc *RecvChunkCreate) SetRecvFile(r *RecvFile) *RecvChunkCreate {
	return rcc.SetRecvFileID(r.ID)
}

// Mutation returns the RecvChunkMutation object of the builder.
func (rcc *RecvChunkCreate) Mutation() *RecvChunkMutation {
	return rcc.mutation
}

// Save creates the RecvChunk in the database.
func (rcc *RecvChunkCreate) Save(ctx context.Context) (*RecvChunk, error) {
	rcc.defaults()
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RecvChunkCreate) SaveX(ctx context.Context) *RecvChunk {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RecvChunkCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RecvChunkCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *RecvChunkCreate) defaults() {
	if _, ok := rcc.mutation.ChunkIndex(); !ok {
		v := recvchunk.DefaultChunkIndex
		rcc.mutation.SetChunkIndex(v)
	}
	if _, ok := rcc.mutation.ChunkOffset(); !ok {
		v := recvchunk.DefaultChunkOffset
		rcc.mutation.SetChunkOffset(v)
	}
	if _, ok := rcc.mutation.ChunkSize(); !ok {
		v := recvchunk.DefaultChunkSize
		rcc.mutation.SetChunkSize(v)
	}
	if _, ok := rcc.mutation.Status(); !ok {
		v := recvchunk.DefaultStatus
		rcc.mutation.SetStatus(v)
	}
	if _, ok := rcc.mutation.UpdatedAt(); !ok {
		v := recvchunk.DefaultUpdatedAt()
		rcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rcc.mutation.CreatedAt(); !ok {
		v := recvchunk.DefaultCreatedAt()
		rcc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RecvChunkCreate) check() error {
	if _, ok := rcc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "RecvChunk.file_id"`)}
	}
	if _, ok := rcc.mutation.ChunkIndex(); !ok {
		return &ValidationError{Name: "chunk_index", err: errors.New(`ent: missing required field "RecvChunk.chunk_index"`)}
	}
	if _, ok := rcc.mutation.ChunkOffset(); !ok {
		return &ValidationError{Name: "chunk_offset", err: errors.New(`ent: missing required field "RecvChunk.chunk_offset"`)}
	}
	if _, ok := rcc.mutation.ChunkSize(); !ok {
		return &ValidationError{Name: "chunk_size", err: errors.New(`ent: missing required field "RecvChunk.chunk_size"`)}
	}
	if _, ok := rcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RecvChunk.status"`)}
	}
	if _, ok := rcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RecvChunk.updated_at"`)}
	}
	if _, ok := rcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RecvChunk.created_at"`)}
	}
	if len(rcc.mutation.RecvFileIDs()) == 0 {
		return &ValidationError{Name: "recv_file", err: errors.New(`ent: missing required edge "RecvChunk.recv_file"`)}
	}
	return nil
}

func (rcc *RecvChunkCreate) sqlSave(ctx context.Context) (*RecvChunk, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RecvChunkCreate) createSpec() (*RecvChunk, *sqlgraph.CreateSpec) {
	var (
		_node = &RecvChunk{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(recvchunk.Table, sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt))
	)
	if value, ok := rcc.mutation.ChunkIndex(); ok {
		_spec.SetField(recvchunk.FieldChunkIndex, field.TypeInt, value)
		_node.ChunkIndex = value
	}
	if value, ok := rcc.mutation.ChunkOffset(); ok {
		_spec.SetField(recvchunk.FieldChunkOffset, field.TypeInt64, value)
		_node.ChunkOffset = value
	}
	if value, ok := rcc.mutation.ChunkSize(); ok {
		_spec.SetField(recvchunk.FieldChunkSize, field.TypeInt64, value)
		_node.ChunkSize = value
	}
	if value, ok := rcc.mutation.Status(); ok {
		_spec.SetField(recvchunk.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := rcc.mutation.UpdatedAt(); ok {
		_spec.SetField(recvchunk.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rcc.mutation.CreatedAt(); ok {
		_spec.SetField(recvchunk.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rcc.mutation.RecvFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recvchunk.RecvFileTable,
			Columns: []string{recvchunk.RecvFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecvChunkCreateBulk is the builder for creating many RecvChunk entities in bulk.
type RecvChunkCreateBulk struct {
	config
	err      error
	builders []*RecvChunkCreate
}

// Save creates the RecvChunk entities in the database.
func (rccb *RecvChunkCreateBulk) Save(ctx context.Context) ([]*RecvChunk, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RecvChunk, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecvChunkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RecvChunkCreateBulk) SaveX(ctx context.Context) []*RecvChunk {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RecvChunkCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RecvChunkCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}
