// Code generated by ent, DO NOT EDIT.

package recvfile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldID, id))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFileName, v))
}

// FilePathSave applies equality check predicate on the "file_path_save" field. It's identical to FilePathSaveEQ.
func FilePathSave(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFilePathSave, v))
}

// FilePathOrigin applies equality check predicate on the "file_path_origin" field. It's identical to FilePathOriginEQ.
func FilePathOrigin(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFilePathOrigin, v))
}

// Fid applies equality check predicate on the "fid" field. It's identical to FidEQ.
func Fid(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFid, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFileSize, v))
}

// ChunkNumTotal applies equality check predicate on the "chunk_num_total" field. It's identical to ChunkNumTotalEQ.
func ChunkNumTotal(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldChunkNumTotal, v))
}

// ChunkNumRecved applies equality check predicate on the "chunk_num_recved" field. It's identical to ChunkNumRecvedEQ.
func ChunkNumRecved(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldChunkNumRecved, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldStatus, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldCreatedAt, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameIsNil applies the IsNil predicate on the "file_name" field.
func FileNameIsNil() predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIsNull(FieldFileName))
}

// FileNameNotNil applies the NotNil predicate on the "file_name" field.
func FileNameNotNil() predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotNull(FieldFileName))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldContainsFold(FieldFileName, v))
}

// FilePathSaveEQ applies the EQ predicate on the "file_path_save" field.
func FilePathSaveEQ(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFilePathSave, v))
}

// FilePathSaveNEQ applies the NEQ predicate on the "file_path_save" field.
func FilePathSaveNEQ(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldFilePathSave, v))
}

// FilePathSaveIn applies the In predicate on the "file_path_save" field.
func FilePathSaveIn(vs ...string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldFilePathSave, vs...))
}

// FilePathSaveNotIn applies the NotIn predicate on the "file_path_save" field.
func FilePathSaveNotIn(vs ...string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldFilePathSave, vs...))
}

// FilePathSaveGT applies the GT predicate on the "file_path_save" field.
func FilePathSaveGT(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldFilePathSave, v))
}

// FilePathSaveGTE applies the GTE predicate on the "file_path_save" field.
func FilePathSaveGTE(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldFilePathSave, v))
}

// FilePathSaveLT applies the LT predicate on the "file_path_save" field.
func FilePathSaveLT(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldFilePathSave, v))
}

// FilePathSaveLTE applies the LTE predicate on the "file_path_save" field.
func FilePathSaveLTE(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldFilePathSave, v))
}

// FilePathSaveContains applies the Contains predicate on the "file_path_save" field.
func FilePathSaveContains(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldContains(FieldFilePathSave, v))
}

// FilePathSaveHasPrefix applies the HasPrefix predicate on the "file_path_save" field.
func FilePathSaveHasPrefix(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldHasPrefix(FieldFilePathSave, v))
}

// FilePathSaveHasSuffix applies the HasSuffix predicate on the "file_path_save" field.
func FilePathSaveHasSuffix(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldHasSuffix(FieldFilePathSave, v))
}

// FilePathSaveIsNil applies the IsNil predicate on the "file_path_save" field.
func FilePathSaveIsNil() predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIsNull(FieldFilePathSave))
}

// FilePathSaveNotNil applies the NotNil predicate on the "file_path_save" field.
func FilePathSaveNotNil() predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotNull(FieldFilePathSave))
}

// FilePathSaveEqualFold applies the EqualFold predicate on the "file_path_save" field.
func FilePathSaveEqualFold(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEqualFold(FieldFilePathSave, v))
}

// FilePathSaveContainsFold applies the ContainsFold predicate on the "file_path_save" field.
func FilePathSaveContainsFold(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldContainsFold(FieldFilePathSave, v))
}

// FilePathOriginEQ applies the EQ predicate on the "file_path_origin" field.
func FilePathOriginEQ(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFilePathOrigin, v))
}

// FilePathOriginNEQ applies the NEQ predicate on the "file_path_origin" field.
func FilePathOriginNEQ(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldFilePathOrigin, v))
}

// FilePathOriginIn applies the In predicate on the "file_path_origin" field.
func FilePathOriginIn(vs ...string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldFilePathOrigin, vs...))
}

// FilePathOriginNotIn applies the NotIn predicate on the "file_path_origin" field.
func FilePathOriginNotIn(vs ...string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldFilePathOrigin, vs...))
}

// FilePathOriginGT applies the GT predicate on the "file_path_origin" field.
func FilePathOriginGT(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldFilePathOrigin, v))
}

// FilePathOriginGTE applies the GTE predicate on the "file_path_origin" field.
func FilePathOriginGTE(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldFilePathOrigin, v))
}

// FilePathOriginLT applies the LT predicate on the "file_path_origin" field.
func FilePathOriginLT(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldFilePathOrigin, v))
}

// FilePathOriginLTE applies the LTE predicate on the "file_path_origin" field.
func FilePathOriginLTE(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldFilePathOrigin, v))
}

// FilePathOriginContains applies the Contains predicate on the "file_path_origin" field.
func FilePathOriginContains(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldContains(FieldFilePathOrigin, v))
}

// FilePathOriginHasPrefix applies the HasPrefix predicate on the "file_path_origin" field.
func FilePathOriginHasPrefix(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldHasPrefix(FieldFilePathOrigin, v))
}

// FilePathOriginHasSuffix applies the HasSuffix predicate on the "file_path_origin" field.
func FilePathOriginHasSuffix(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldHasSuffix(FieldFilePathOrigin, v))
}

// FilePathOriginIsNil applies the IsNil predicate on the "file_path_origin" field.
func FilePathOriginIsNil() predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIsNull(FieldFilePathOrigin))
}

// FilePathOriginNotNil applies the NotNil predicate on the "file_path_origin" field.
func FilePathOriginNotNil() predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotNull(FieldFilePathOrigin))
}

// FilePathOriginEqualFold applies the EqualFold predicate on the "file_path_origin" field.
func FilePathOriginEqualFold(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEqualFold(FieldFilePathOrigin, v))
}

// FilePathOriginContainsFold applies the ContainsFold predicate on the "file_path_origin" field.
func FilePathOriginContainsFold(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldContainsFold(FieldFilePathOrigin, v))
}

// FidEQ applies the EQ predicate on the "fid" field.
func FidEQ(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFid, v))
}

// FidNEQ applies the NEQ predicate on the "fid" field.
func FidNEQ(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldFid, v))
}

// FidIn applies the In predicate on the "fid" field.
func FidIn(vs ...string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldFid, vs...))
}

// FidNotIn applies the NotIn predicate on the "fid" field.
func FidNotIn(vs ...string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldFid, vs...))
}

// FidGT applies the GT predicate on the "fid" field.
func FidGT(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldFid, v))
}

// FidGTE applies the GTE predicate on the "fid" field.
func FidGTE(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldFid, v))
}

// FidLT applies the LT predicate on the "fid" field.
func FidLT(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldFid, v))
}

// FidLTE applies the LTE predicate on the "fid" field.
func FidLTE(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldFid, v))
}

// FidContains applies the Contains predicate on the "fid" field.
func FidContains(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldContains(FieldFid, v))
}

// FidHasPrefix applies the HasPrefix predicate on the "fid" field.
func FidHasPrefix(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldHasPrefix(FieldFid, v))
}

// FidHasSuffix applies the HasSuffix predicate on the "fid" field.
func FidHasSuffix(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldHasSuffix(FieldFid, v))
}

// FidEqualFold applies the EqualFold predicate on the "fid" field.
func FidEqualFold(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEqualFold(FieldFid, v))
}

// FidContainsFold applies the ContainsFold predicate on the "fid" field.
func FidContainsFold(v string) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldContainsFold(FieldFid, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int64) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldFileSize, v))
}

// ChunkNumTotalEQ applies the EQ predicate on the "chunk_num_total" field.
func ChunkNumTotalEQ(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldChunkNumTotal, v))
}

// ChunkNumTotalNEQ applies the NEQ predicate on the "chunk_num_total" field.
func ChunkNumTotalNEQ(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldChunkNumTotal, v))
}

// ChunkNumTotalIn applies the In predicate on the "chunk_num_total" field.
func ChunkNumTotalIn(vs ...int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldChunkNumTotal, vs...))
}

// ChunkNumTotalNotIn applies the NotIn predicate on the "chunk_num_total" field.
func ChunkNumTotalNotIn(vs ...int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldChunkNumTotal, vs...))
}

// ChunkNumTotalGT applies the GT predicate on the "chunk_num_total" field.
func ChunkNumTotalGT(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldChunkNumTotal, v))
}

// ChunkNumTotalGTE applies the GTE predicate on the "chunk_num_total" field.
func ChunkNumTotalGTE(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldChunkNumTotal, v))
}

// ChunkNumTotalLT applies the LT predicate on the "chunk_num_total" field.
func ChunkNumTotalLT(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldChunkNumTotal, v))
}

// ChunkNumTotalLTE applies the LTE predicate on the "chunk_num_total" field.
func ChunkNumTotalLTE(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldChunkNumTotal, v))
}

// ChunkNumRecvedEQ applies the EQ predicate on the "chunk_num_recved" field.
func ChunkNumRecvedEQ(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldChunkNumRecved, v))
}

// ChunkNumRecvedNEQ applies the NEQ predicate on the "chunk_num_recved" field.
func ChunkNumRecvedNEQ(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldChunkNumRecved, v))
}

// ChunkNumRecvedIn applies the In predicate on the "chunk_num_recved" field.
func ChunkNumRecvedIn(vs ...int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldChunkNumRecved, vs...))
}

// ChunkNumRecvedNotIn applies the NotIn predicate on the "chunk_num_recved" field.
func ChunkNumRecvedNotIn(vs ...int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldChunkNumRecved, vs...))
}

// ChunkNumRecvedGT applies the GT predicate on the "chunk_num_recved" field.
func ChunkNumRecvedGT(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldChunkNumRecved, v))
}

// ChunkNumRecvedGTE applies the GTE predicate on the "chunk_num_recved" field.
func ChunkNumRecvedGTE(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldChunkNumRecved, v))
}

// ChunkNumRecvedLT applies the LT predicate on the "chunk_num_recved" field.
func ChunkNumRecvedLT(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldChunkNumRecved, v))
}

// ChunkNumRecvedLTE applies the LTE predicate on the "chunk_num_recved" field.
func ChunkNumRecvedLTE(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldChunkNumRecved, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldStatus, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RecvFile {
	return predicate.RecvFile(sql.FieldLTE(FieldCreatedAt, v))
}

// HasRecvChunks applies the HasEdge predicate on the "recv_chunks" edge.
func HasRecvChunks() predicate.RecvFile {
	return predicate.RecvFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecvChunksTable, RecvChunksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecvChunksWith applies the HasEdge predicate on the "recv_chunks" edge with a given conditions (other predicates).
func HasRecvChunksWith(preds ...predicate.RecvChunk) predicate.RecvFile {
	return predicate.RecvFile(func(s *sql.Selector) {
		step := newRecvChunksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RecvFile) predicate.RecvFile {
	return predicate.RecvFile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RecvFile) predicate.RecvFile {
	return predicate.RecvFile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RecvFile) predicate.RecvFile {
	return predicate.RecvFile(sql.NotPredicates(p))
}
