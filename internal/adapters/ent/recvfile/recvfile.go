// Code generated by ent, DO NOT EDIT.

package recvfile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the recvfile type in the database.
	Label = "recv_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldTaskName holds the string denoting the task_name field in the database.
	FieldTaskName = "task_name"
	// FieldFilePathSave holds the string denoting the file_path_save field in the database.
	FieldFilePathSave = "file_path_save"
	// FieldFilePathOrigin holds the string denoting the file_path_origin field in the database.
	FieldFilePathOrigin = "file_path_origin"
	// FieldFid holds the string denoting the fid field in the database.
	FieldFid = "fid"
	// FieldFileSize holds the string denoting the file_size field in the database.
	FieldFileSize = "file_size"
	// FieldChunkNumTotal holds the string denoting the chunk_num_total field in the database.
	FieldChunkNumTotal = "chunk_num_total"
	// FieldChunkNumRecved holds the string denoting the chunk_num_recved field in the database.
	FieldChunkNumRecved = "chunk_num_recved"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeRecvChunks holds the string denoting the recv_chunks edge name in mutations.
	EdgeRecvChunks = "recv_chunks"
	// Table holds the table name of the recvfile in the database.
	Table = "recv_files"
	// RecvChunksTable is the table that holds the recv_chunks relation/edge.
	RecvChunksTable = "recv_chunks"
	// RecvChunksInverseTable is the table name for the RecvChunk entity.
	// It exists in this package in order to avoid circular dependency with the "recvchunk" package.
	RecvChunksInverseTable = "recv_chunks"
	// RecvChunksColumn is the table column denoting the recv_chunks relation/edge.
	RecvChunksColumn = "file_id"
)

// Columns holds all SQL columns for recvfile fields.
var Columns = []string{
	FieldID,
	FieldTaskID,
	FieldTaskName,
	FieldFilePathSave,
	FieldFilePathOrigin,
	FieldFid,
	FieldFileSize,
	FieldChunkNumTotal,
	FieldChunkNumRecved,
	FieldStatus,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TaskIDValidator is a validator for the "task_id" field. It is called by the builders before save.
	TaskIDValidator func(string) error
	// TaskNameValidator is a validator for the "task_name" field. It is called by the builders before save.
	TaskNameValidator func(string) error
	// FilePathSaveValidator is a validator for the "file_path_save" field. It is called by the builders before save.
	FilePathSaveValidator func(string) error
	// FilePathOriginValidator is a validator for the "file_path_origin" field. It is called by the builders before save.
	FilePathOriginValidator func(string) error
	// DefaultFileSize holds the default value on creation for the "file_size" field.
	DefaultFileSize int64
	// DefaultChunkNumTotal holds the default value on creation for the "chunk_num_total" field.
	DefaultChunkNumTotal int
	// DefaultChunkNumRecved holds the default value on creation for the "chunk_num_recved" field.
	DefaultChunkNumRecved int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the RecvFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByTaskName orders the results by the task_name field.
func ByTaskName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskName, opts...).ToFunc()
}

// ByFilePathSave orders the results by the file_path_save field.
func ByFilePathSave(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilePathSave, opts...).ToFunc()
}

// ByFilePathOrigin orders the results by the file_path_origin field.
func ByFilePathOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilePathOrigin, opts...).ToFunc()
}

// ByFid orders the results by the fid field.
func ByFid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFid, opts...).ToFunc()
}

// ByFileSize orders the results by the file_size field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByChunkNumTotal orders the results by the chunk_num_total field.
func ByChunkNumTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChunkNumTotal, opts...).ToFunc()
}

// ByChunkNumRecved orders the results by the chunk_num_recved field.
func ByChunkNumRecved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChunkNumRecved, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRecvChunksCount orders the results by recv_chunks count.
func ByRecvChunksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecvChunksStep(), opts...)
	}
}

// ByRecvChunks orders the results by recv_chunks terms.
func ByRecvChunks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecvChunksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecvChunksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecvChunksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecvChunksTable, RecvChunksColumn),
	)
}
