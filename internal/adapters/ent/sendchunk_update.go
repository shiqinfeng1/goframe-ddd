// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/predicate"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/sendchunk"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/sendfile"
)

// SendChunkUpdate is the builder for updating SendChunk entities.
type SendChunkUpdate struct {
	config
	hooks    []Hook
	mutation *SendChunkMutation
}

// Where appends a list predicates to the SendChunkUpdate builder.
func (scu *SendChunkUpdate) Where(ps ...predicate.SendChunk) *SendChunkUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetFileID sets the "file_id" field.
func (scu *SendChunkUpdate) SetFileID(i int) *SendChunkUpdate {
	scu.mutation.SetFileID(i)
	return scu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (scu *SendChunkUpdate) SetNillableFileID(i *int) *SendChunkUpdate {
	if i != nil {
		scu.SetFileID(*i)
	}
	return scu
}

// SetChunkIndex sets the "chunk_index" field.
func (scu *SendChunkUpdate) SetChunkIndex(i int) *SendChunkUpdate {
	scu.mutation.ResetChunkIndex()
	scu.mutation.SetChunkIndex(i)
	return scu
}

// SetNillableChunkIndex sets the "chunk_index" field if the given value is not nil.
func (scu *SendChunkUpdate) SetNillableChunkIndex(i *int) *SendChunkUpdate {
	if i != nil {
		scu.SetChunkIndex(*i)
	}
	return scu
}

// AddChunkIndex adds i to the "chunk_index" field.
func (scu *SendChunkUpdate) AddChunkIndex(i int) *SendChunkUpdate {
	scu.mutation.AddChunkIndex(i)
	return scu
}

// SetChunkOffset sets the "chunk_offset" field.
func (scu *SendChunkUpdate) SetChunkOffset(i int64) *SendChunkUpdate {
	scu.mutation.ResetChunkOffset()
	scu.mutation.SetChunkOffset(i)
	return scu
}

// SetNillableChunkOffset sets the "chunk_offset" field if the given value is not nil.
func (scu *SendChunkUpdate) SetNillableChunkOffset(i *int64) *SendChunkUpdate {
	if i != nil {
		scu.SetChunkOffset(*i)
	}
	return scu
}

// AddChunkOffset adds i to the "chunk_offset" field.
func (scu *SendChunkUpdate) AddChunkOffset(i int64) *SendChunkUpdate {
	scu.mutation.AddChunkOffset(i)
	return scu
}

// SetChunkSize sets the "chunk_size" field.
func (scu *SendChunkUpdate) SetChunkSize(i int64) *SendChunkUpdate {
	scu.mutation.ResetChunkSize()
	scu.mutation.SetChunkSize(i)
	return scu
}

// SetNillableChunkSize sets the "chunk_size" field if the given value is not nil.
func (scu *SendChunkUpdate) SetNillableChunkSize(i *int64) *SendChunkUpdate {
	if i != nil {
		scu.SetChunkSize(*i)
	}
	return scu
}

// AddChunkSize adds i to the "chunk_size" field.
func (scu *SendChunkUpdate) AddChunkSize(i int64) *SendChunkUpdate {
	scu.mutation.AddChunkSize(i)
	return scu
}

// SetStatus sets the "status" field.
func (scu *SendChunkUpdate) SetStatus(i int) *SendChunkUpdate {
	scu.mutation.ResetStatus()
	scu.mutation.SetStatus(i)
	return scu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scu *SendChunkUpdate) SetNillableStatus(i *int) *SendChunkUpdate {
	if i != nil {
		scu.SetStatus(*i)
	}
	return scu
}

// AddStatus adds i to the "status" field.
func (scu *SendChunkUpdate) AddStatus(i int) *SendChunkUpdate {
	scu.mutation.AddStatus(i)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *SendChunkUpdate) SetUpdatedAt(t time.Time) *SendChunkUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetSendFileID sets the "send_file" edge to the SendFile entity by ID.
func (scu *SendChunkUpdate) SetSendFileID(id int) *SendChunkUpdate {
	scu.mutation.SetSendFileID(id)
	return scu
}

// SetSendFile sets the "send_file" edge to the SendFile entity.
func (scu *SendChunkUpdate) SetSendFile(s *SendFile) *SendChunkUpdate {
	return scu.SetSendFileID(s.ID)
}

// Mutation returns the SendChunkMutation object of the builder.
func (scu *SendChunkUpdate) Mutation() *SendChunkMutation {
	return scu.mutation
}

// ClearSendFile clears the "send_file" edge to the SendFile entity.
func (scu *SendChunkUpdate) ClearSendFile() *SendChunkUpdate {
	scu.mutation.ClearSendFile()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SendChunkUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SendChunkUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SendChunkUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SendChunkUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SendChunkUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := sendchunk.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SendChunkUpdate) check() error {
	if scu.mutation.SendFileCleared() && len(scu.mutation.SendFileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SendChunk.send_file"`)
	}
	return nil
}

func (scu *SendChunkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sendchunk.Table, sendchunk.Columns, sqlgraph.NewFieldSpec(sendchunk.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.ChunkIndex(); ok {
		_spec.SetField(sendchunk.FieldChunkIndex, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedChunkIndex(); ok {
		_spec.AddField(sendchunk.FieldChunkIndex, field.TypeInt, value)
	}
	if value, ok := scu.mutation.ChunkOffset(); ok {
		_spec.SetField(sendchunk.FieldChunkOffset, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedChunkOffset(); ok {
		_spec.AddField(sendchunk.FieldChunkOffset, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.ChunkSize(); ok {
		_spec.SetField(sendchunk.FieldChunkSize, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedChunkSize(); ok {
		_spec.AddField(sendchunk.FieldChunkSize, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.Status(); ok {
		_spec.SetField(sendchunk.FieldStatus, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedStatus(); ok {
		_spec.AddField(sendchunk.FieldStatus, field.TypeInt, value)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(sendchunk.FieldUpdatedAt, field.TypeTime, value)
	}
	if scu.mutation.SendFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sendchunk.SendFileTable,
			Columns: []string{sendchunk.SendFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sendfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.SendFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sendchunk.SendFileTable,
			Columns: []string{sendchunk.SendFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sendfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sendchunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SendChunkUpdateOne is the builder for updating a single SendChunk entity.
type SendChunkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SendChunkMutation
}

// SetFileID sets the "file_id" field.
func (scuo *SendChunkUpdateOne) SetFileID(i int) *SendChunkUpdateOne {
	scuo.mutation.SetFileID(i)
	return scuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (scuo *SendChunkUpdateOne) SetNillableFileID(i *int) *SendChunkUpdateOne {
	if i != nil {
		scuo.SetFileID(*i)
	}
	return scuo
}

// SetChunkIndex sets the "chunk_index" field.
func (scuo *SendChunkUpdateOne) SetChunkIndex(i int) *SendChunkUpdateOne {
	scuo.mutation.ResetChunkIndex()
	scuo.mutation.SetChunkIndex(i)
	return scuo
}

// SetNillableChunkIndex sets the "chunk_index" field if the given value is not nil.
func (scuo *SendChunkUpdateOne) SetNillableChunkIndex(i *int) *SendChunkUpdateOne {
	if i != nil {
		scuo.SetChunkIndex(*i)
	}
	return scuo
}

// AddChunkIndex adds i to the "chunk_index" field.
func (scuo *SendChunkUpdateOne) AddChunkIndex(i int) *SendChunkUpdateOne {
	scuo.mutation.AddChunkIndex(i)
	return scuo
}

// SetChunkOffset sets the "chunk_offset" field.
func (scuo *SendChunkUpdateOne) SetChunkOffset(i int64) *SendChunkUpdateOne {
	scuo.mutation.ResetChunkOffset()
	scuo.mutation.SetChunkOffset(i)
	return scuo
}

// SetNillableChunkOffset sets the "chunk_offset" field if the given value is not nil.
func (scuo *SendChunkUpdateOne) SetNillableChunkOffset(i *int64) *SendChunkUpdateOne {
	if i != nil {
		scuo.SetChunkOffset(*i)
	}
	return scuo
}

// AddChunkOffset adds i to the "chunk_offset" field.
func (scuo *SendChunkUpdateOne) AddChunkOffset(i int64) *SendChunkUpdateOne {
	scuo.mutation.AddChunkOffset(i)
	return scuo
}

// SetChunkSize sets the "chunk_size" field.
func (scuo *SendChunkUpdateOne) SetChunkSize(i int64) *SendChunkUpdateOne {
	scuo.mutation.ResetChunkSize()
	scuo.mutation.SetChunkSize(i)
	return scuo
}

// SetNillableChunkSize sets the "chunk_size" field if the given value is not nil.
func (scuo *SendChunkUpdateOne) SetNillableChunkSize(i *int64) *SendChunkUpdateOne {
	if i != nil {
		scuo.SetChunkSize(*i)
	}
	return scuo
}

// AddChunkSize adds i to the "chunk_size" field.
func (scuo *SendChunkUpdateOne) AddChunkSize(i int64) *SendChunkUpdateOne {
	scuo.mutation.AddChunkSize(i)
	return scuo
}

// SetStatus sets the "status" field.
func (scuo *SendChunkUpdateOne) SetStatus(i int) *SendChunkUpdateOne {
	scuo.mutation.ResetStatus()
	scuo.mutation.SetStatus(i)
	return scuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scuo *SendChunkUpdateOne) SetNillableStatus(i *int) *SendChunkUpdateOne {
	if i != nil {
		scuo.SetStatus(*i)
	}
	return scuo
}

// AddStatus adds i to the "status" field.
func (scuo *SendChunkUpdateOne) AddStatus(i int) *SendChunkUpdateOne {
	scuo.mutation.AddStatus(i)
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *SendChunkUpdateOne) SetUpdatedAt(t time.Time) *SendChunkUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetSendFileID sets the "send_file" edge to the SendFile entity by ID.
func (scuo *SendChunkUpdateOne) SetSendFileID(id int) *SendChunkUpdateOne {
	scuo.mutation.SetSendFileID(id)
	return scuo
}

// SetSendFile sets the "send_file" edge to the SendFile entity.
func (scuo *SendChunkUpdateOne) SetSendFile(s *SendFile) *SendChunkUpdateOne {
	return scuo.SetSendFileID(s.ID)
}

// Mutation returns the SendChunkMutation object of the builder.
func (scuo *SendChunkUpdateOne) Mutation() *SendChunkMutation {
	return scuo.mutation
}

// ClearSendFile clears the "send_file" edge to the SendFile entity.
func (scuo *SendChunkUpdateOne) ClearSendFile() *SendChunkUpdateOne {
	scuo.mutation.ClearSendFile()
	return scuo
}

// Where appends a list predicates to the SendChunkUpdate builder.
func (scuo *SendChunkUpdateOne) Where(ps ...predicate.SendChunk) *SendChunkUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SendChunkUpdateOne) Select(field string, fields ...string) *SendChunkUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SendChunk entity.
func (scuo *SendChunkUpdateOne) Save(ctx context.Context) (*SendChunk, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SendChunkUpdateOne) SaveX(ctx context.Context) *SendChunk {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SendChunkUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SendChunkUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SendChunkUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := sendchunk.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SendChunkUpdateOne) check() error {
	if scuo.mutation.SendFileCleared() && len(scuo.mutation.SendFileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SendChunk.send_file"`)
	}
	return nil
}

func (scuo *SendChunkUpdateOne) sqlSave(ctx context.Context) (_node *SendChunk, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sendchunk.Table, sendchunk.Columns, sqlgraph.NewFieldSpec(sendchunk.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SendChunk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sendchunk.FieldID)
		for _, f := range fields {
			if !sendchunk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sendchunk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.ChunkIndex(); ok {
		_spec.SetField(sendchunk.FieldChunkIndex, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedChunkIndex(); ok {
		_spec.AddField(sendchunk.FieldChunkIndex, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.ChunkOffset(); ok {
		_spec.SetField(sendchunk.FieldChunkOffset, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedChunkOffset(); ok {
		_spec.AddField(sendchunk.FieldChunkOffset, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.ChunkSize(); ok {
		_spec.SetField(sendchunk.FieldChunkSize, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedChunkSize(); ok {
		_spec.AddField(sendchunk.FieldChunkSize, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.Status(); ok {
		_spec.SetField(sendchunk.FieldStatus, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedStatus(); ok {
		_spec.AddField(sendchunk.FieldStatus, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sendchunk.FieldUpdatedAt, field.TypeTime, value)
	}
	if scuo.mutation.SendFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sendchunk.SendFileTable,
			Columns: []string{sendchunk.SendFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sendfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.SendFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sendchunk.SendFileTable,
			Columns: []string{sendchunk.SendFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sendfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SendChunk{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sendchunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
