// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/recvfile"
)

// RecvFile is the model entity for the RecvFile schema.
type RecvFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName *string `json:"file_name,omitempty"`
	// FilePathSave holds the value of the "file_path_save" field.
	FilePathSave *string `json:"file_path_save,omitempty"`
	// FilePathOrigin holds the value of the "file_path_origin" field.
	FilePathOrigin *string `json:"file_path_origin,omitempty"`
	// Fid holds the value of the "fid" field.
	Fid string `json:"fid,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int64 `json:"file_size,omitempty"`
	// ChunkNumTotal holds the value of the "chunk_num_total" field.
	ChunkNumTotal int `json:"chunk_num_total,omitempty"`
	// ChunkNumRecved holds the value of the "chunk_num_recved" field.
	ChunkNumRecved int `json:"chunk_num_recved,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecvFileQuery when eager-loading is set.
	Edges        RecvFileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecvFileEdges holds the relations/edges for other nodes in the graph.
type RecvFileEdges struct {
	// RecvChunks holds the value of the recv_chunks edge.
	RecvChunks []*RecvChunk `json:"recv_chunks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecvChunksOrErr returns the RecvChunks value or an error if the edge
// was not loaded in eager-loading.
func (e RecvFileEdges) RecvChunksOrErr() ([]*RecvChunk, error) {
	if e.loadedTypes[0] {
		return e.RecvChunks, nil
	}
	return nil, &NotLoadedError{edge: "recv_chunks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecvFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recvfile.FieldID, recvfile.FieldFileSize, recvfile.FieldChunkNumTotal, recvfile.FieldChunkNumRecved, recvfile.FieldStatus:
			values[i] = new(sql.NullInt64)
		case recvfile.FieldFileName, recvfile.FieldFilePathSave, recvfile.FieldFilePathOrigin, recvfile.FieldFid:
			values[i] = new(sql.NullString)
		case recvfile.FieldUpdatedAt, recvfile.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecvFile fields.
func (rf *RecvFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recvfile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rf.ID = int(value.Int64)
		case recvfile.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				rf.FileName = new(string)
				*rf.FileName = value.String
			}
		case recvfile.FieldFilePathSave:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path_save", values[i])
			} else if value.Valid {
				rf.FilePathSave = new(string)
				*rf.FilePathSave = value.String
			}
		case recvfile.FieldFilePathOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path_origin", values[i])
			} else if value.Valid {
				rf.FilePathOrigin = new(string)
				*rf.FilePathOrigin = value.String
			}
		case recvfile.FieldFid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fid", values[i])
			} else if value.Valid {
				rf.Fid = value.String
			}
		case recvfile.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				rf.FileSize = value.Int64
			}
		case recvfile.FieldChunkNumTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chunk_num_total", values[i])
			} else if value.Valid {
				rf.ChunkNumTotal = int(value.Int64)
			}
		case recvfile.FieldChunkNumRecved:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chunk_num_recved", values[i])
			} else if value.Valid {
				rf.ChunkNumRecved = int(value.Int64)
			}
		case recvfile.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rf.Status = int(value.Int64)
			}
		case recvfile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rf.UpdatedAt = value.Time
			}
		case recvfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rf.CreatedAt = value.Time
			}
		default:
			rf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecvFile.
// This includes values selected through modifiers, order, etc.
func (rf *RecvFile) Value(name string) (ent.Value, error) {
	return rf.selectValues.Get(name)
}

// QueryRecvChunks queries the "recv_chunks" edge of the RecvFile entity.
func (rf *RecvFile) QueryRecvChunks() *RecvChunkQuery {
	return NewRecvFileClient(rf.config).QueryRecvChunks(rf)
}

// Update returns a builder for updating this RecvFile.
// Note that you need to call RecvFile.Unwrap() before calling this method if this RecvFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (rf *RecvFile) Update() *RecvFileUpdateOne {
	return NewRecvFileClient(rf.config).UpdateOne(rf)
}

// Unwrap unwraps the RecvFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rf *RecvFile) Unwrap() *RecvFile {
	_tx, ok := rf.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecvFile is not a transactional entity")
	}
	rf.config.driver = _tx.drv
	return rf
}

// String implements the fmt.Stringer.
func (rf *RecvFile) String() string {
	var builder strings.Builder
	builder.WriteString("RecvFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rf.ID))
	if v := rf.FileName; v != nil {
		builder.WriteString("file_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := rf.FilePathSave; v != nil {
		builder.WriteString("file_path_save=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := rf.FilePathOrigin; v != nil {
		builder.WriteString("file_path_origin=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("fid=")
	builder.WriteString(rf.Fid)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", rf.FileSize))
	builder.WriteString(", ")
	builder.WriteString("chunk_num_total=")
	builder.WriteString(fmt.Sprintf("%v", rf.ChunkNumTotal))
	builder.WriteString(", ")
	builder.WriteString("chunk_num_recved=")
	builder.WriteString(fmt.Sprintf("%v", rf.ChunkNumRecved))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rf.Status))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rf.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RecvFiles is a parsable slice of RecvFile.
type RecvFiles []*RecvFile
