// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/filetransfertask"
)

// FileTransferTaskCreate is the builder for creating a FileTransferTask entity.
type FileTransferTaskCreate struct {
	config
	mutation *FileTransferTaskMutation
	hooks    []Hook
}

// SetTaskID sets the "task_id" field.
func (fttc *FileTransferTaskCreate) SetTaskID(s string) *FileTransferTaskCreate {
	fttc.mutation.SetTaskID(s)
	return fttc
}

// SetTaskName sets the "task_name" field.
func (fttc *FileTransferTaskCreate) SetTaskName(s string) *FileTransferTaskCreate {
	fttc.mutation.SetTaskName(s)
	return fttc
}

// SetNodeID sets the "node_id" field.
func (fttc *FileTransferTaskCreate) SetNodeID(s string) *FileTransferTaskCreate {
	fttc.mutation.SetNodeID(s)
	return fttc
}

// SetStatus sets the "status" field.
func (fttc *FileTransferTaskCreate) SetStatus(i int) *FileTransferTaskCreate {
	fttc.mutation.SetStatus(i)
	return fttc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fttc *FileTransferTaskCreate) SetNillableStatus(i *int) *FileTransferTaskCreate {
	if i != nil {
		fttc.SetStatus(*i)
	}
	return fttc
}

// SetElapsed sets the "elapsed" field.
func (fttc *FileTransferTaskCreate) SetElapsed(s string) *FileTransferTaskCreate {
	fttc.mutation.SetElapsed(s)
	return fttc
}

// SetNillableElapsed sets the "elapsed" field if the given value is not nil.
func (fttc *FileTransferTaskCreate) SetNillableElapsed(s *string) *FileTransferTaskCreate {
	if s != nil {
		fttc.SetElapsed(*s)
	}
	return fttc
}

// SetSpeed sets the "speed" field.
func (fttc *FileTransferTaskCreate) SetSpeed(s string) *FileTransferTaskCreate {
	fttc.mutation.SetSpeed(s)
	return fttc
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (fttc *FileTransferTaskCreate) SetNillableSpeed(s *string) *FileTransferTaskCreate {
	if s != nil {
		fttc.SetSpeed(*s)
	}
	return fttc
}

// SetUpdatedAt sets the "updated_at" field.
func (fttc *FileTransferTaskCreate) SetUpdatedAt(t time.Time) *FileTransferTaskCreate {
	fttc.mutation.SetUpdatedAt(t)
	return fttc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fttc *FileTransferTaskCreate) SetNillableUpdatedAt(t *time.Time) *FileTransferTaskCreate {
	if t != nil {
		fttc.SetUpdatedAt(*t)
	}
	return fttc
}

// SetCreatedAt sets the "created_at" field.
func (fttc *FileTransferTaskCreate) SetCreatedAt(t time.Time) *FileTransferTaskCreate {
	fttc.mutation.SetCreatedAt(t)
	return fttc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fttc *FileTransferTaskCreate) SetNillableCreatedAt(t *time.Time) *FileTransferTaskCreate {
	if t != nil {
		fttc.SetCreatedAt(*t)
	}
	return fttc
}

// Mutation returns the FileTransferTaskMutation object of the builder.
func (fttc *FileTransferTaskCreate) Mutation() *FileTransferTaskMutation {
	return fttc.mutation
}

// Save creates the FileTransferTask in the database.
func (fttc *FileTransferTaskCreate) Save(ctx context.Context) (*FileTransferTask, error) {
	fttc.defaults()
	return withHooks(ctx, fttc.sqlSave, fttc.mutation, fttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fttc *FileTransferTaskCreate) SaveX(ctx context.Context) *FileTransferTask {
	v, err := fttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fttc *FileTransferTaskCreate) Exec(ctx context.Context) error {
	_, err := fttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fttc *FileTransferTaskCreate) ExecX(ctx context.Context) {
	if err := fttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fttc *FileTransferTaskCreate) defaults() {
	if _, ok := fttc.mutation.Status(); !ok {
		v := filetransfertask.DefaultStatus
		fttc.mutation.SetStatus(v)
	}
	if _, ok := fttc.mutation.Elapsed(); !ok {
		v := filetransfertask.DefaultElapsed
		fttc.mutation.SetElapsed(v)
	}
	if _, ok := fttc.mutation.Speed(); !ok {
		v := filetransfertask.DefaultSpeed
		fttc.mutation.SetSpeed(v)
	}
	if _, ok := fttc.mutation.UpdatedAt(); !ok {
		v := filetransfertask.DefaultUpdatedAt()
		fttc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fttc.mutation.CreatedAt(); !ok {
		v := filetransfertask.DefaultCreatedAt()
		fttc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fttc *FileTransferTaskCreate) check() error {
	if _, ok := fttc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "FileTransferTask.task_id"`)}
	}
	if v, ok := fttc.mutation.TaskID(); ok {
		if err := filetransfertask.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.task_id": %w`, err)}
		}
	}
	if _, ok := fttc.mutation.TaskName(); !ok {
		return &ValidationError{Name: "task_name", err: errors.New(`ent: missing required field "FileTransferTask.task_name"`)}
	}
	if v, ok := fttc.mutation.TaskName(); ok {
		if err := filetransfertask.TaskNameValidator(v); err != nil {
			return &ValidationError{Name: "task_name", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.task_name": %w`, err)}
		}
	}
	if _, ok := fttc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "FileTransferTask.node_id"`)}
	}
	if v, ok := fttc.mutation.NodeID(); ok {
		if err := filetransfertask.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.node_id": %w`, err)}
		}
	}
	if _, ok := fttc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FileTransferTask.status"`)}
	}
	if _, ok := fttc.mutation.Elapsed(); !ok {
		return &ValidationError{Name: "elapsed", err: errors.New(`ent: missing required field "FileTransferTask.elapsed"`)}
	}
	if v, ok := fttc.mutation.Elapsed(); ok {
		if err := filetransfertask.ElapsedValidator(v); err != nil {
			return &ValidationError{Name: "elapsed", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.elapsed": %w`, err)}
		}
	}
	if _, ok := fttc.mutation.Speed(); !ok {
		return &ValidationError{Name: "speed", err: errors.New(`ent: missing required field "FileTransferTask.speed"`)}
	}
	if v, ok := fttc.mutation.Speed(); ok {
		if err := filetransfertask.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`ent: validator failed for field "FileTransferTask.speed": %w`, err)}
		}
	}
	if _, ok := fttc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FileTransferTask.updated_at"`)}
	}
	if _, ok := fttc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FileTransferTask.created_at"`)}
	}
	return nil
}

func (fttc *FileTransferTaskCreate) sqlSave(ctx context.Context) (*FileTransferTask, error) {
	if err := fttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fttc.mutation.id = &_node.ID
	fttc.mutation.done = true
	return _node, nil
}

func (fttc *FileTransferTaskCreate) createSpec() (*FileTransferTask, *sqlgraph.CreateSpec) {
	var (
		_node = &FileTransferTask{config: fttc.config}
		_spec = sqlgraph.NewCreateSpec(filetransfertask.Table, sqlgraph.NewFieldSpec(filetransfertask.FieldID, field.TypeInt))
	)
	if value, ok := fttc.mutation.TaskID(); ok {
		_spec.SetField(filetransfertask.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := fttc.mutation.TaskName(); ok {
		_spec.SetField(filetransfertask.FieldTaskName, field.TypeString, value)
		_node.TaskName = value
	}
	if value, ok := fttc.mutation.NodeID(); ok {
		_spec.SetField(filetransfertask.FieldNodeID, field.TypeString, value)
		_node.NodeID = value
	}
	if value, ok := fttc.mutation.Status(); ok {
		_spec.SetField(filetransfertask.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := fttc.mutation.Elapsed(); ok {
		_spec.SetField(filetransfertask.FieldElapsed, field.TypeString, value)
		_node.Elapsed = value
	}
	if value, ok := fttc.mutation.Speed(); ok {
		_spec.SetField(filetransfertask.FieldSpeed, field.TypeString, value)
		_node.Speed = value
	}
	if value, ok := fttc.mutation.UpdatedAt(); ok {
		_spec.SetField(filetransfertask.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fttc.mutation.CreatedAt(); ok {
		_spec.SetField(filetransfertask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// FileTransferTaskCreateBulk is the builder for creating many FileTransferTask entities in bulk.
type FileTransferTaskCreateBulk struct {
	config
	err      error
	builders []*FileTransferTaskCreate
}

// Save creates the FileTransferTask entities in the database.
func (fttcb *FileTransferTaskCreateBulk) Save(ctx context.Context) ([]*FileTransferTask, error) {
	if fttcb.err != nil {
		return nil, fttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fttcb.builders))
	nodes := make([]*FileTransferTask, len(fttcb.builders))
	mutators := make([]Mutator, len(fttcb.builders))
	for i := range fttcb.builders {
		func(i int, root context.Context) {
			builder := fttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileTransferTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fttcb *FileTransferTaskCreateBulk) SaveX(ctx context.Context) []*FileTransferTask {
	v, err := fttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fttcb *FileTransferTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := fttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fttcb *FileTransferTaskCreateBulk) ExecX(ctx context.Context) {
	if err := fttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
