// Code generated by ent, DO NOT EDIT.

package sendchunk

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLTE(FieldID, id))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldFileID, v))
}

// ChunkIndex applies equality check predicate on the "chunk_index" field. It's identical to ChunkIndexEQ.
func ChunkIndex(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldChunkIndex, v))
}

// ChunkOffset applies equality check predicate on the "chunk_offset" field. It's identical to ChunkOffsetEQ.
func ChunkOffset(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldChunkOffset, v))
}

// ChunkSize applies equality check predicate on the "chunk_size" field. It's identical to ChunkSizeEQ.
func ChunkSize(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldChunkSize, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldStatus, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldCreatedAt, v))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNotIn(FieldFileID, vs...))
}

// ChunkIndexEQ applies the EQ predicate on the "chunk_index" field.
func ChunkIndexEQ(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldChunkIndex, v))
}

// ChunkIndexNEQ applies the NEQ predicate on the "chunk_index" field.
func ChunkIndexNEQ(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNEQ(FieldChunkIndex, v))
}

// ChunkIndexIn applies the In predicate on the "chunk_index" field.
func ChunkIndexIn(vs ...int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldIn(FieldChunkIndex, vs...))
}

// ChunkIndexNotIn applies the NotIn predicate on the "chunk_index" field.
func ChunkIndexNotIn(vs ...int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNotIn(FieldChunkIndex, vs...))
}

// ChunkIndexGT applies the GT predicate on the "chunk_index" field.
func ChunkIndexGT(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGT(FieldChunkIndex, v))
}

// ChunkIndexGTE applies the GTE predicate on the "chunk_index" field.
func ChunkIndexGTE(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGTE(FieldChunkIndex, v))
}

// ChunkIndexLT applies the LT predicate on the "chunk_index" field.
func ChunkIndexLT(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLT(FieldChunkIndex, v))
}

// ChunkIndexLTE applies the LTE predicate on the "chunk_index" field.
func ChunkIndexLTE(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLTE(FieldChunkIndex, v))
}

// ChunkOffsetEQ applies the EQ predicate on the "chunk_offset" field.
func ChunkOffsetEQ(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldChunkOffset, v))
}

// ChunkOffsetNEQ applies the NEQ predicate on the "chunk_offset" field.
func ChunkOffsetNEQ(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNEQ(FieldChunkOffset, v))
}

// ChunkOffsetIn applies the In predicate on the "chunk_offset" field.
func ChunkOffsetIn(vs ...int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldIn(FieldChunkOffset, vs...))
}

// ChunkOffsetNotIn applies the NotIn predicate on the "chunk_offset" field.
func ChunkOffsetNotIn(vs ...int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNotIn(FieldChunkOffset, vs...))
}

// ChunkOffsetGT applies the GT predicate on the "chunk_offset" field.
func ChunkOffsetGT(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGT(FieldChunkOffset, v))
}

// ChunkOffsetGTE applies the GTE predicate on the "chunk_offset" field.
func ChunkOffsetGTE(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGTE(FieldChunkOffset, v))
}

// ChunkOffsetLT applies the LT predicate on the "chunk_offset" field.
func ChunkOffsetLT(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLT(FieldChunkOffset, v))
}

// ChunkOffsetLTE applies the LTE predicate on the "chunk_offset" field.
func ChunkOffsetLTE(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLTE(FieldChunkOffset, v))
}

// ChunkSizeEQ applies the EQ predicate on the "chunk_size" field.
func ChunkSizeEQ(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldChunkSize, v))
}

// ChunkSizeNEQ applies the NEQ predicate on the "chunk_size" field.
func ChunkSizeNEQ(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNEQ(FieldChunkSize, v))
}

// ChunkSizeIn applies the In predicate on the "chunk_size" field.
func ChunkSizeIn(vs ...int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldIn(FieldChunkSize, vs...))
}

// ChunkSizeNotIn applies the NotIn predicate on the "chunk_size" field.
func ChunkSizeNotIn(vs ...int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNotIn(FieldChunkSize, vs...))
}

// ChunkSizeGT applies the GT predicate on the "chunk_size" field.
func ChunkSizeGT(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGT(FieldChunkSize, v))
}

// ChunkSizeGTE applies the GTE predicate on the "chunk_size" field.
func ChunkSizeGTE(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGTE(FieldChunkSize, v))
}

// ChunkSizeLT applies the LT predicate on the "chunk_size" field.
func ChunkSizeLT(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLT(FieldChunkSize, v))
}

// ChunkSizeLTE applies the LTE predicate on the "chunk_size" field.
func ChunkSizeLTE(v int64) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLTE(FieldChunkSize, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLTE(FieldStatus, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SendChunk {
	return predicate.SendChunk(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSendFile applies the HasEdge predicate on the "send_file" edge.
func HasSendFile() predicate.SendChunk {
	return predicate.SendChunk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SendFileTable, SendFileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSendFileWith applies the HasEdge predicate on the "send_file" edge with a given conditions (other predicates).
func HasSendFileWith(preds ...predicate.SendFile) predicate.SendChunk {
	return predicate.SendChunk(func(s *sql.Selector) {
		step := newSendFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SendChunk) predicate.SendChunk {
	return predicate.SendChunk(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SendChunk) predicate.SendChunk {
	return predicate.SendChunk(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SendChunk) predicate.SendChunk {
	return predicate.SendChunk(sql.NotPredicates(p))
}
