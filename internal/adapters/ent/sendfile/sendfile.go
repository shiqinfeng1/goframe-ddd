// Code generated by ent, DO NOT EDIT.

package sendfile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sendfile type in the database.
	Label = "send_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFilePath holds the string denoting the file_path field in the database.
	FieldFilePath = "file_path"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldFid holds the string denoting the fid field in the database.
	FieldFid = "fid"
	// FieldFileSize holds the string denoting the file_size field in the database.
	FieldFileSize = "file_size"
	// FieldChunkNumTotal holds the string denoting the chunk_num_total field in the database.
	FieldChunkNumTotal = "chunk_num_total"
	// FieldChunkNumSended holds the string denoting the chunk_num_sended field in the database.
	FieldChunkNumSended = "chunk_num_sended"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldElapsed holds the string denoting the elapsed field in the database.
	FieldElapsed = "elapsed"
	// FieldSpeed holds the string denoting the speed field in the database.
	FieldSpeed = "speed"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSendChunks holds the string denoting the send_chunks edge name in mutations.
	EdgeSendChunks = "send_chunks"
	// Table holds the table name of the sendfile in the database.
	Table = "send_files"
	// SendChunksTable is the table that holds the send_chunks relation/edge.
	SendChunksTable = "send_chunks"
	// SendChunksInverseTable is the table name for the SendChunk entity.
	// It exists in this package in order to avoid circular dependency with the "sendchunk" package.
	SendChunksInverseTable = "send_chunks"
	// SendChunksColumn is the table column denoting the send_chunks relation/edge.
	SendChunksColumn = "file_id"
)

// Columns holds all SQL columns for sendfile fields.
var Columns = []string{
	FieldID,
	FieldFilePath,
	FieldFileName,
	FieldFid,
	FieldFileSize,
	FieldChunkNumTotal,
	FieldChunkNumSended,
	FieldStatus,
	FieldElapsed,
	FieldSpeed,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFileSize holds the default value on creation for the "file_size" field.
	DefaultFileSize int64
	// DefaultChunkNumTotal holds the default value on creation for the "chunk_num_total" field.
	DefaultChunkNumTotal int
	// DefaultChunkNumSended holds the default value on creation for the "chunk_num_sended" field.
	DefaultChunkNumSended int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultElapsed holds the default value on creation for the "elapsed" field.
	DefaultElapsed string
	// ElapsedValidator is a validator for the "elapsed" field. It is called by the builders before save.
	ElapsedValidator func(string) error
	// DefaultSpeed holds the default value on creation for the "speed" field.
	DefaultSpeed string
	// SpeedValidator is a validator for the "speed" field. It is called by the builders before save.
	SpeedValidator func(string) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the SendFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFilePath orders the results by the file_path field.
func ByFilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilePath, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByFid orders the results by the fid field.
func ByFid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFid, opts...).ToFunc()
}

// ByFileSize orders the results by the file_size field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByChunkNumTotal orders the results by the chunk_num_total field.
func ByChunkNumTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChunkNumTotal, opts...).ToFunc()
}

// ByChunkNumSended orders the results by the chunk_num_sended field.
func ByChunkNumSended(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChunkNumSended, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByElapsed orders the results by the elapsed field.
func ByElapsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElapsed, opts...).ToFunc()
}

// BySpeed orders the results by the speed field.
func BySpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpeed, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySendChunksCount orders the results by send_chunks count.
func BySendChunksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSendChunksStep(), opts...)
	}
}

// BySendChunks orders the results by send_chunks terms.
func BySendChunks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSendChunksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSendChunksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SendChunksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SendChunksTable, SendChunksColumn),
	)
}
