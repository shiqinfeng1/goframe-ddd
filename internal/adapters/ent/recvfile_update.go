// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/predicate"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/recvchunk"
	"github.com/shiqinfeng1/goframe-ddd/internal/adapters/ent/recvfile"
)

// RecvFileUpdate is the builder for updating RecvFile entities.
type RecvFileUpdate struct {
	config
	hooks    []Hook
	mutation *RecvFileMutation
}

// Where appends a list predicates to the RecvFileUpdate builder.
func (rfu *RecvFileUpdate) Where(ps ...predicate.RecvFile) *RecvFileUpdate {
	rfu.mutation.Where(ps...)
	return rfu
}

// SetFileName sets the "file_name" field.
func (rfu *RecvFileUpdate) SetFileName(s string) *RecvFileUpdate {
	rfu.mutation.SetFileName(s)
	return rfu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (rfu *RecvFileUpdate) SetNillableFileName(s *string) *RecvFileUpdate {
	if s != nil {
		rfu.SetFileName(*s)
	}
	return rfu
}

// ClearFileName clears the value of the "file_name" field.
func (rfu *RecvFileUpdate) ClearFileName() *RecvFileUpdate {
	rfu.mutation.ClearFileName()
	return rfu
}

// SetFilePathSave sets the "file_path_save" field.
func (rfu *RecvFileUpdate) SetFilePathSave(s string) *RecvFileUpdate {
	rfu.mutation.SetFilePathSave(s)
	return rfu
}

// SetNillableFilePathSave sets the "file_path_save" field if the given value is not nil.
func (rfu *RecvFileUpdate) SetNillableFilePathSave(s *string) *RecvFileUpdate {
	if s != nil {
		rfu.SetFilePathSave(*s)
	}
	return rfu
}

// ClearFilePathSave clears the value of the "file_path_save" field.
func (rfu *RecvFileUpdate) ClearFilePathSave() *RecvFileUpdate {
	rfu.mutation.ClearFilePathSave()
	return rfu
}

// SetFilePathOrigin sets the "file_path_origin" field.
func (rfu *RecvFileUpdate) SetFilePathOrigin(s string) *RecvFileUpdate {
	rfu.mutation.SetFilePathOrigin(s)
	return rfu
}

// SetNillableFilePathOrigin sets the "file_path_origin" field if the given value is not nil.
func (rfu *RecvFileUpdate) SetNillableFilePathOrigin(s *string) *RecvFileUpdate {
	if s != nil {
		rfu.SetFilePathOrigin(*s)
	}
	return rfu
}

// ClearFilePathOrigin clears the value of the "file_path_origin" field.
func (rfu *RecvFileUpdate) ClearFilePathOrigin() *RecvFileUpdate {
	rfu.mutation.ClearFilePathOrigin()
	return rfu
}

// SetFid sets the "fid" field.
func (rfu *RecvFileUpdate) SetFid(s string) *RecvFileUpdate {
	rfu.mutation.SetFid(s)
	return rfu
}

// SetNillableFid sets the "fid" field if the given value is not nil.
func (rfu *RecvFileUpdate) SetNillableFid(s *string) *RecvFileUpdate {
	if s != nil {
		rfu.SetFid(*s)
	}
	return rfu
}

// SetFileSize sets the "file_size" field.
func (rfu *RecvFileUpdate) SetFileSize(i int64) *RecvFileUpdate {
	rfu.mutation.ResetFileSize()
	rfu.mutation.SetFileSize(i)
	return rfu
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (rfu *RecvFileUpdate) SetNillableFileSize(i *int64) *RecvFileUpdate {
	if i != nil {
		rfu.SetFileSize(*i)
	}
	return rfu
}

// AddFileSize adds i to the "file_size" field.
func (rfu *RecvFileUpdate) AddFileSize(i int64) *RecvFileUpdate {
	rfu.mutation.AddFileSize(i)
	return rfu
}

// SetChunkNumTotal sets the "chunk_num_total" field.
func (rfu *RecvFileUpdate) SetChunkNumTotal(i int) *RecvFileUpdate {
	rfu.mutation.ResetChunkNumTotal()
	rfu.mutation.SetChunkNumTotal(i)
	return rfu
}

// SetNillableChunkNumTotal sets the "chunk_num_total" field if the given value is not nil.
func (rfu *RecvFileUpdate) SetNillableChunkNumTotal(i *int) *RecvFileUpdate {
	if i != nil {
		rfu.SetChunkNumTotal(*i)
	}
	return rfu
}

// AddChunkNumTotal adds i to the "chunk_num_total" field.
func (rfu *RecvFileUpdate) AddChunkNumTotal(i int) *RecvFileUpdate {
	rfu.mutation.AddChunkNumTotal(i)
	return rfu
}

// SetChunkNumRecved sets the "chunk_num_recved" field.
func (rfu *RecvFileUpdate) SetChunkNumRecved(i int) *RecvFileUpdate {
	rfu.mutation.ResetChunkNumRecved()
	rfu.mutation.SetChunkNumRecved(i)
	return rfu
}

// SetNillableChunkNumRecved sets the "chunk_num_recved" field if the given value is not nil.
func (rfu *RecvFileUpdate) SetNillableChunkNumRecved(i *int) *RecvFileUpdate {
	if i != nil {
		rfu.SetChunkNumRecved(*i)
	}
	return rfu
}

// AddChunkNumRecved adds i to the "chunk_num_recved" field.
func (rfu *RecvFileUpdate) AddChunkNumRecved(i int) *RecvFileUpdate {
	rfu.mutation.AddChunkNumRecved(i)
	return rfu
}

// SetStatus sets the "status" field.
func (rfu *RecvFileUpdate) SetStatus(i int) *RecvFileUpdate {
	rfu.mutation.ResetStatus()
	rfu.mutation.SetStatus(i)
	return rfu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rfu *RecvFileUpdate) SetNillableStatus(i *int) *RecvFileUpdate {
	if i != nil {
		rfu.SetStatus(*i)
	}
	return rfu
}

// AddStatus adds i to the "status" field.
func (rfu *RecvFileUpdate) AddStatus(i int) *RecvFileUpdate {
	rfu.mutation.AddStatus(i)
	return rfu
}

// SetUpdatedAt sets the "updated_at" field.
func (rfu *RecvFileUpdate) SetUpdatedAt(t time.Time) *RecvFileUpdate {
	rfu.mutation.SetUpdatedAt(t)
	return rfu
}

// AddRecvChunkIDs adds the "recv_chunks" edge to the RecvChunk entity by IDs.
func (rfu *RecvFileUpdate) AddRecvChunkIDs(ids ...int) *RecvFileUpdate {
	rfu.mutation.AddRecvChunkIDs(ids...)
	return rfu
}

// AddRecvChunks adds the "recv_chunks" edges to the RecvChunk entity.
func (rfu *RecvFileUpdate) AddRecvChunks(r ...*RecvChunk) *RecvFileUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfu.AddRecvChunkIDs(ids...)
}

// Mutation returns the RecvFileMutation object of the builder.
func (rfu *RecvFileUpdate) Mutation() *RecvFileMutation {
	return rfu.mutation
}

// ClearRecvChunks clears all "recv_chunks" edges to the RecvChunk entity.
func (rfu *RecvFileUpdate) ClearRecvChunks() *RecvFileUpdate {
	rfu.mutation.ClearRecvChunks()
	return rfu
}

// RemoveRecvChunkIDs removes the "recv_chunks" edge to RecvChunk entities by IDs.
func (rfu *RecvFileUpdate) RemoveRecvChunkIDs(ids ...int) *RecvFileUpdate {
	rfu.mutation.RemoveRecvChunkIDs(ids...)
	return rfu
}

// RemoveRecvChunks removes "recv_chunks" edges to RecvChunk entities.
func (rfu *RecvFileUpdate) RemoveRecvChunks(r ...*RecvChunk) *RecvFileUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfu.RemoveRecvChunkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rfu *RecvFileUpdate) Save(ctx context.Context) (int, error) {
	rfu.defaults()
	return withHooks(ctx, rfu.sqlSave, rfu.mutation, rfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rfu *RecvFileUpdate) SaveX(ctx context.Context) int {
	affected, err := rfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rfu *RecvFileUpdate) Exec(ctx context.Context) error {
	_, err := rfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfu *RecvFileUpdate) ExecX(ctx context.Context) {
	if err := rfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rfu *RecvFileUpdate) defaults() {
	if _, ok := rfu.mutation.UpdatedAt(); !ok {
		v := recvfile.UpdateDefaultUpdatedAt()
		rfu.mutation.SetUpdatedAt(v)
	}
}

func (rfu *RecvFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recvfile.Table, recvfile.Columns, sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt))
	if ps := rfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfu.mutation.FileName(); ok {
		_spec.SetField(recvfile.FieldFileName, field.TypeString, value)
	}
	if rfu.mutation.FileNameCleared() {
		_spec.ClearField(recvfile.FieldFileName, field.TypeString)
	}
	if value, ok := rfu.mutation.FilePathSave(); ok {
		_spec.SetField(recvfile.FieldFilePathSave, field.TypeString, value)
	}
	if rfu.mutation.FilePathSaveCleared() {
		_spec.ClearField(recvfile.FieldFilePathSave, field.TypeString)
	}
	if value, ok := rfu.mutation.FilePathOrigin(); ok {
		_spec.SetField(recvfile.FieldFilePathOrigin, field.TypeString, value)
	}
	if rfu.mutation.FilePathOriginCleared() {
		_spec.ClearField(recvfile.FieldFilePathOrigin, field.TypeString)
	}
	if value, ok := rfu.mutation.Fid(); ok {
		_spec.SetField(recvfile.FieldFid, field.TypeString, value)
	}
	if value, ok := rfu.mutation.FileSize(); ok {
		_spec.SetField(recvfile.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := rfu.mutation.AddedFileSize(); ok {
		_spec.AddField(recvfile.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := rfu.mutation.ChunkNumTotal(); ok {
		_spec.SetField(recvfile.FieldChunkNumTotal, field.TypeInt, value)
	}
	if value, ok := rfu.mutation.AddedChunkNumTotal(); ok {
		_spec.AddField(recvfile.FieldChunkNumTotal, field.TypeInt, value)
	}
	if value, ok := rfu.mutation.ChunkNumRecved(); ok {
		_spec.SetField(recvfile.FieldChunkNumRecved, field.TypeInt, value)
	}
	if value, ok := rfu.mutation.AddedChunkNumRecved(); ok {
		_spec.AddField(recvfile.FieldChunkNumRecved, field.TypeInt, value)
	}
	if value, ok := rfu.mutation.Status(); ok {
		_spec.SetField(recvfile.FieldStatus, field.TypeInt, value)
	}
	if value, ok := rfu.mutation.AddedStatus(); ok {
		_spec.AddField(recvfile.FieldStatus, field.TypeInt, value)
	}
	if value, ok := rfu.mutation.UpdatedAt(); ok {
		_spec.SetField(recvfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if rfu.mutation.RecvChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recvfile.RecvChunksTable,
			Columns: []string{recvfile.RecvChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfu.mutation.RemovedRecvChunksIDs(); len(nodes) > 0 && !rfu.mutation.RecvChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recvfile.RecvChunksTable,
			Columns: []string{recvfile.RecvChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfu.mutation.RecvChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recvfile.RecvChunksTable,
			Columns: []string{recvfile.RecvChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recvfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rfu.mutation.done = true
	return n, nil
}

// RecvFileUpdateOne is the builder for updating a single RecvFile entity.
type RecvFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecvFileMutation
}

// SetFileName sets the "file_name" field.
func (rfuo *RecvFileUpdateOne) SetFileName(s string) *RecvFileUpdateOne {
	rfuo.mutation.SetFileName(s)
	return rfuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (rfuo *RecvFileUpdateOne) SetNillableFileName(s *string) *RecvFileUpdateOne {
	if s != nil {
		rfuo.SetFileName(*s)
	}
	return rfuo
}

// ClearFileName clears the value of the "file_name" field.
func (rfuo *RecvFileUpdateOne) ClearFileName() *RecvFileUpdateOne {
	rfuo.mutation.ClearFileName()
	return rfuo
}

// SetFilePathSave sets the "file_path_save" field.
func (rfuo *RecvFileUpdateOne) SetFilePathSave(s string) *RecvFileUpdateOne {
	rfuo.mutation.SetFilePathSave(s)
	return rfuo
}

// SetNillableFilePathSave sets the "file_path_save" field if the given value is not nil.
func (rfuo *RecvFileUpdateOne) SetNillableFilePathSave(s *string) *RecvFileUpdateOne {
	if s != nil {
		rfuo.SetFilePathSave(*s)
	}
	return rfuo
}

// ClearFilePathSave clears the value of the "file_path_save" field.
func (rfuo *RecvFileUpdateOne) ClearFilePathSave() *RecvFileUpdateOne {
	rfuo.mutation.ClearFilePathSave()
	return rfuo
}

// SetFilePathOrigin sets the "file_path_origin" field.
func (rfuo *RecvFileUpdateOne) SetFilePathOrigin(s string) *RecvFileUpdateOne {
	rfuo.mutation.SetFilePathOrigin(s)
	return rfuo
}

// SetNillableFilePathOrigin sets the "file_path_origin" field if the given value is not nil.
func (rfuo *RecvFileUpdateOne) SetNillableFilePathOrigin(s *string) *RecvFileUpdateOne {
	if s != nil {
		rfuo.SetFilePathOrigin(*s)
	}
	return rfuo
}

// ClearFilePathOrigin clears the value of the "file_path_origin" field.
func (rfuo *RecvFileUpdateOne) ClearFilePathOrigin() *RecvFileUpdateOne {
	rfuo.mutation.ClearFilePathOrigin()
	return rfuo
}

// SetFid sets the "fid" field.
func (rfuo *RecvFileUpdateOne) SetFid(s string) *RecvFileUpdateOne {
	rfuo.mutation.SetFid(s)
	return rfuo
}

// SetNillableFid sets the "fid" field if the given value is not nil.
func (rfuo *RecvFileUpdateOne) SetNillableFid(s *string) *RecvFileUpdateOne {
	if s != nil {
		rfuo.SetFid(*s)
	}
	return rfuo
}

// SetFileSize sets the "file_size" field.
func (rfuo *RecvFileUpdateOne) SetFileSize(i int64) *RecvFileUpdateOne {
	rfuo.mutation.ResetFileSize()
	rfuo.mutation.SetFileSize(i)
	return rfuo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (rfuo *RecvFileUpdateOne) SetNillableFileSize(i *int64) *RecvFileUpdateOne {
	if i != nil {
		rfuo.SetFileSize(*i)
	}
	return rfuo
}

// AddFileSize adds i to the "file_size" field.
func (rfuo *RecvFileUpdateOne) AddFileSize(i int64) *RecvFileUpdateOne {
	rfuo.mutation.AddFileSize(i)
	return rfuo
}

// SetChunkNumTotal sets the "chunk_num_total" field.
func (rfuo *RecvFileUpdateOne) SetChunkNumTotal(i int) *RecvFileUpdateOne {
	rfuo.mutation.ResetChunkNumTotal()
	rfuo.mutation.SetChunkNumTotal(i)
	return rfuo
}

// SetNillableChunkNumTotal sets the "chunk_num_total" field if the given value is not nil.
func (rfuo *RecvFileUpdateOne) SetNillableChunkNumTotal(i *int) *RecvFileUpdateOne {
	if i != nil {
		rfuo.SetChunkNumTotal(*i)
	}
	return rfuo
}

// AddChunkNumTotal adds i to the "chunk_num_total" field.
func (rfuo *RecvFileUpdateOne) AddChunkNumTotal(i int) *RecvFileUpdateOne {
	rfuo.mutation.AddChunkNumTotal(i)
	return rfuo
}

// SetChunkNumRecved sets the "chunk_num_recved" field.
func (rfuo *RecvFileUpdateOne) SetChunkNumRecved(i int) *RecvFileUpdateOne {
	rfuo.mutation.ResetChunkNumRecved()
	rfuo.mutation.SetChunkNumRecved(i)
	return rfuo
}

// SetNillableChunkNumRecved sets the "chunk_num_recved" field if the given value is not nil.
func (rfuo *RecvFileUpdateOne) SetNillableChunkNumRecved(i *int) *RecvFileUpdateOne {
	if i != nil {
		rfuo.SetChunkNumRecved(*i)
	}
	return rfuo
}

// AddChunkNumRecved adds i to the "chunk_num_recved" field.
func (rfuo *RecvFileUpdateOne) AddChunkNumRecved(i int) *RecvFileUpdateOne {
	rfuo.mutation.AddChunkNumRecved(i)
	return rfuo
}

// SetStatus sets the "status" field.
func (rfuo *RecvFileUpdateOne) SetStatus(i int) *RecvFileUpdateOne {
	rfuo.mutation.ResetStatus()
	rfuo.mutation.SetStatus(i)
	return rfuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rfuo *RecvFileUpdateOne) SetNillableStatus(i *int) *RecvFileUpdateOne {
	if i != nil {
		rfuo.SetStatus(*i)
	}
	return rfuo
}

// AddStatus adds i to the "status" field.
func (rfuo *RecvFileUpdateOne) AddStatus(i int) *RecvFileUpdateOne {
	rfuo.mutation.AddStatus(i)
	return rfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rfuo *RecvFileUpdateOne) SetUpdatedAt(t time.Time) *RecvFileUpdateOne {
	rfuo.mutation.SetUpdatedAt(t)
	return rfuo
}

// AddRecvChunkIDs adds the "recv_chunks" edge to the RecvChunk entity by IDs.
func (rfuo *RecvFileUpdateOne) AddRecvChunkIDs(ids ...int) *RecvFileUpdateOne {
	rfuo.mutation.AddRecvChunkIDs(ids...)
	return rfuo
}

// AddRecvChunks adds the "recv_chunks" edges to the RecvChunk entity.
func (rfuo *RecvFileUpdateOne) AddRecvChunks(r ...*RecvChunk) *RecvFileUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfuo.AddRecvChunkIDs(ids...)
}

// Mutation returns the RecvFileMutation object of the builder.
func (rfuo *RecvFileUpdateOne) Mutation() *RecvFileMutation {
	return rfuo.mutation
}

// ClearRecvChunks clears all "recv_chunks" edges to the RecvChunk entity.
func (rfuo *RecvFileUpdateOne) ClearRecvChunks() *RecvFileUpdateOne {
	rfuo.mutation.ClearRecvChunks()
	return rfuo
}

// RemoveRecvChunkIDs removes the "recv_chunks" edge to RecvChunk entities by IDs.
func (rfuo *RecvFileUpdateOne) RemoveRecvChunkIDs(ids ...int) *RecvFileUpdateOne {
	rfuo.mutation.RemoveRecvChunkIDs(ids...)
	return rfuo
}

// RemoveRecvChunks removes "recv_chunks" edges to RecvChunk entities.
func (rfuo *RecvFileUpdateOne) RemoveRecvChunks(r ...*RecvChunk) *RecvFileUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfuo.RemoveRecvChunkIDs(ids...)
}

// Where appends a list predicates to the RecvFileUpdate builder.
func (rfuo *RecvFileUpdateOne) Where(ps ...predicate.RecvFile) *RecvFileUpdateOne {
	rfuo.mutation.Where(ps...)
	return rfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rfuo *RecvFileUpdateOne) Select(field string, fields ...string) *RecvFileUpdateOne {
	rfuo.fields = append([]string{field}, fields...)
	return rfuo
}

// Save executes the query and returns the updated RecvFile entity.
func (rfuo *RecvFileUpdateOne) Save(ctx context.Context) (*RecvFile, error) {
	rfuo.defaults()
	return withHooks(ctx, rfuo.sqlSave, rfuo.mutation, rfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rfuo *RecvFileUpdateOne) SaveX(ctx context.Context) *RecvFile {
	node, err := rfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rfuo *RecvFileUpdateOne) Exec(ctx context.Context) error {
	_, err := rfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfuo *RecvFileUpdateOne) ExecX(ctx context.Context) {
	if err := rfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rfuo *RecvFileUpdateOne) defaults() {
	if _, ok := rfuo.mutation.UpdatedAt(); !ok {
		v := recvfile.UpdateDefaultUpdatedAt()
		rfuo.mutation.SetUpdatedAt(v)
	}
}

func (rfuo *RecvFileUpdateOne) sqlSave(ctx context.Context) (_node *RecvFile, err error) {
	_spec := sqlgraph.NewUpdateSpec(recvfile.Table, recvfile.Columns, sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt))
	id, ok := rfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecvFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recvfile.FieldID)
		for _, f := range fields {
			if !recvfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recvfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfuo.mutation.FileName(); ok {
		_spec.SetField(recvfile.FieldFileName, field.TypeString, value)
	}
	if rfuo.mutation.FileNameCleared() {
		_spec.ClearField(recvfile.FieldFileName, field.TypeString)
	}
	if value, ok := rfuo.mutation.FilePathSave(); ok {
		_spec.SetField(recvfile.FieldFilePathSave, field.TypeString, value)
	}
	if rfuo.mutation.FilePathSaveCleared() {
		_spec.ClearField(recvfile.FieldFilePathSave, field.TypeString)
	}
	if value, ok := rfuo.mutation.FilePathOrigin(); ok {
		_spec.SetField(recvfile.FieldFilePathOrigin, field.TypeString, value)
	}
	if rfuo.mutation.FilePathOriginCleared() {
		_spec.ClearField(recvfile.FieldFilePathOrigin, field.TypeString)
	}
	if value, ok := rfuo.mutation.Fid(); ok {
		_spec.SetField(recvfile.FieldFid, field.TypeString, value)
	}
	if value, ok := rfuo.mutation.FileSize(); ok {
		_spec.SetField(recvfile.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := rfuo.mutation.AddedFileSize(); ok {
		_spec.AddField(recvfile.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := rfuo.mutation.ChunkNumTotal(); ok {
		_spec.SetField(recvfile.FieldChunkNumTotal, field.TypeInt, value)
	}
	if value, ok := rfuo.mutation.AddedChunkNumTotal(); ok {
		_spec.AddField(recvfile.FieldChunkNumTotal, field.TypeInt, value)
	}
	if value, ok := rfuo.mutation.ChunkNumRecved(); ok {
		_spec.SetField(recvfile.FieldChunkNumRecved, field.TypeInt, value)
	}
	if value, ok := rfuo.mutation.AddedChunkNumRecved(); ok {
		_spec.AddField(recvfile.FieldChunkNumRecved, field.TypeInt, value)
	}
	if value, ok := rfuo.mutation.Status(); ok {
		_spec.SetField(recvfile.FieldStatus, field.TypeInt, value)
	}
	if value, ok := rfuo.mutation.AddedStatus(); ok {
		_spec.AddField(recvfile.FieldStatus, field.TypeInt, value)
	}
	if value, ok := rfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(recvfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if rfuo.mutation.RecvChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recvfile.RecvChunksTable,
			Columns: []string{recvfile.RecvChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuo.mutation.RemovedRecvChunksIDs(); len(nodes) > 0 && !rfuo.mutation.RecvChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recvfile.RecvChunksTable,
			Columns: []string{recvfile.RecvChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuo.mutation.RecvChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recvfile.RecvChunksTable,
			Columns: []string{recvfile.RecvChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecvFile{config: rfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recvfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rfuo.mutation.done = true
	return _node, nil
}
