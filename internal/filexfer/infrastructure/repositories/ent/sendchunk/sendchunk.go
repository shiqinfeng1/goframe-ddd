// Code generated by ent, DO NOT EDIT.

package sendchunk

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sendchunk type in the database.
	Label = "send_chunk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSendfileID holds the string denoting the sendfile_id field in the database.
	FieldSendfileID = "sendfile_id"
	// FieldChunkIndex holds the string denoting the chunk_index field in the database.
	FieldChunkIndex = "chunk_index"
	// FieldChunkOffset holds the string denoting the chunk_offset field in the database.
	FieldChunkOffset = "chunk_offset"
	// FieldChunkSize holds the string denoting the chunk_size field in the database.
	FieldChunkSize = "chunk_size"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSendFile holds the string denoting the send_file edge name in mutations.
	EdgeSendFile = "send_file"
	// Table holds the table name of the sendchunk in the database.
	Table = "send_chunks"
	// SendFileTable is the table that holds the send_file relation/edge.
	SendFileTable = "send_chunks"
	// SendFileInverseTable is the table name for the SendFile entity.
	// It exists in this package in order to avoid circular dependency with the "sendfile" package.
	SendFileInverseTable = "send_files"
	// SendFileColumn is the table column denoting the send_file relation/edge.
	SendFileColumn = "sendfile_id"
)

// Columns holds all SQL columns for sendchunk fields.
var Columns = []string{
	FieldID,
	FieldSendfileID,
	FieldChunkIndex,
	FieldChunkOffset,
	FieldChunkSize,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultChunkIndex holds the default value on creation for the "chunk_index" field.
	DefaultChunkIndex int
	// DefaultChunkOffset holds the default value on creation for the "chunk_offset" field.
	DefaultChunkOffset int64
	// DefaultChunkSize holds the default value on creation for the "chunk_size" field.
	DefaultChunkSize int
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the SendChunk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySendfileID orders the results by the sendfile_id field.
func BySendfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendfileID, opts...).ToFunc()
}

// ByChunkIndex orders the results by the chunk_index field.
func ByChunkIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChunkIndex, opts...).ToFunc()
}

// ByChunkOffset orders the results by the chunk_offset field.
func ByChunkOffset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChunkOffset, opts...).ToFunc()
}

// ByChunkSize orders the results by the chunk_size field.
func ByChunkSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChunkSize, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySendFileField orders the results by send_file field.
func BySendFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSendFileStep(), sql.OrderByField(field, opts...))
	}
}
func newSendFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SendFileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SendFileTable, SendFileColumn),
	)
}
