// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/filexfer/infrastructure/repositories/ent/predicate"
	"github.com/shiqinfeng1/goframe-ddd/internal/filexfer/infrastructure/repositories/ent/recvchunk"
	"github.com/shiqinfeng1/goframe-ddd/internal/filexfer/infrastructure/repositories/ent/recvfile"
)

// RecvChunkUpdate is the builder for updating RecvChunk entities.
type RecvChunkUpdate struct {
	config
	hooks    []Hook
	mutation *RecvChunkMutation
}

// Where appends a list predicates to the RecvChunkUpdate builder.
func (rcu *RecvChunkUpdate) Where(ps ...predicate.RecvChunk) *RecvChunkUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetRecvfileID sets the "recvfile_id" field.
func (rcu *RecvChunkUpdate) SetRecvfileID(i int) *RecvChunkUpdate {
	rcu.mutation.SetRecvfileID(i)
	return rcu
}

// SetNillableRecvfileID sets the "recvfile_id" field if the given value is not nil.
func (rcu *RecvChunkUpdate) SetNillableRecvfileID(i *int) *RecvChunkUpdate {
	if i != nil {
		rcu.SetRecvfileID(*i)
	}
	return rcu
}

// SetChunkIndex sets the "chunk_index" field.
func (rcu *RecvChunkUpdate) SetChunkIndex(i int) *RecvChunkUpdate {
	rcu.mutation.ResetChunkIndex()
	rcu.mutation.SetChunkIndex(i)
	return rcu
}

// SetNillableChunkIndex sets the "chunk_index" field if the given value is not nil.
func (rcu *RecvChunkUpdate) SetNillableChunkIndex(i *int) *RecvChunkUpdate {
	if i != nil {
		rcu.SetChunkIndex(*i)
	}
	return rcu
}

// AddChunkIndex adds i to the "chunk_index" field.
func (rcu *RecvChunkUpdate) AddChunkIndex(i int) *RecvChunkUpdate {
	rcu.mutation.AddChunkIndex(i)
	return rcu
}

// SetChunkOffset sets the "chunk_offset" field.
func (rcu *RecvChunkUpdate) SetChunkOffset(i int64) *RecvChunkUpdate {
	rcu.mutation.ResetChunkOffset()
	rcu.mutation.SetChunkOffset(i)
	return rcu
}

// SetNillableChunkOffset sets the "chunk_offset" field if the given value is not nil.
func (rcu *RecvChunkUpdate) SetNillableChunkOffset(i *int64) *RecvChunkUpdate {
	if i != nil {
		rcu.SetChunkOffset(*i)
	}
	return rcu
}

// AddChunkOffset adds i to the "chunk_offset" field.
func (rcu *RecvChunkUpdate) AddChunkOffset(i int64) *RecvChunkUpdate {
	rcu.mutation.AddChunkOffset(i)
	return rcu
}

// SetChunkSize sets the "chunk_size" field.
func (rcu *RecvChunkUpdate) SetChunkSize(i int) *RecvChunkUpdate {
	rcu.mutation.ResetChunkSize()
	rcu.mutation.SetChunkSize(i)
	return rcu
}

// SetNillableChunkSize sets the "chunk_size" field if the given value is not nil.
func (rcu *RecvChunkUpdate) SetNillableChunkSize(i *int) *RecvChunkUpdate {
	if i != nil {
		rcu.SetChunkSize(*i)
	}
	return rcu
}

// AddChunkSize adds i to the "chunk_size" field.
func (rcu *RecvChunkUpdate) AddChunkSize(i int) *RecvChunkUpdate {
	rcu.mutation.AddChunkSize(i)
	return rcu
}

// SetUpdatedAt sets the "updated_at" field.
func (rcu *RecvChunkUpdate) SetUpdatedAt(t time.Time) *RecvChunkUpdate {
	rcu.mutation.SetUpdatedAt(t)
	return rcu
}

// SetRecvFileID sets the "recv_file" edge to the RecvFile entity by ID.
func (rcu *RecvChunkUpdate) SetRecvFileID(id int) *RecvChunkUpdate {
	rcu.mutation.SetRecvFileID(id)
	return rcu
}

// SetRecvFile sets the "recv_file" edge to the RecvFile entity.
func (rcu *RecvChunkUpdate) SetRecvFile(r *RecvFile) *RecvChunkUpdate {
	return rcu.SetRecvFileID(r.ID)
}

// Mutation returns the RecvChunkMutation object of the builder.
func (rcu *RecvChunkUpdate) Mutation() *RecvChunkMutation {
	return rcu.mutation
}

// ClearRecvFile clears the "recv_file" edge to the RecvFile entity.
func (rcu *RecvChunkUpdate) ClearRecvFile() *RecvChunkUpdate {
	rcu.mutation.ClearRecvFile()
	return rcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RecvChunkUpdate) Save(ctx context.Context) (int, error) {
	rcu.defaults()
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RecvChunkUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RecvChunkUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RecvChunkUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcu *RecvChunkUpdate) defaults() {
	if _, ok := rcu.mutation.UpdatedAt(); !ok {
		v := recvchunk.UpdateDefaultUpdatedAt()
		rcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcu *RecvChunkUpdate) check() error {
	if rcu.mutation.RecvFileCleared() && len(rcu.mutation.RecvFileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RecvChunk.recv_file"`)
	}
	return nil
}

func (rcu *RecvChunkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(recvchunk.Table, recvchunk.Columns, sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.ChunkIndex(); ok {
		_spec.SetField(recvchunk.FieldChunkIndex, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.AddedChunkIndex(); ok {
		_spec.AddField(recvchunk.FieldChunkIndex, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.ChunkOffset(); ok {
		_spec.SetField(recvchunk.FieldChunkOffset, field.TypeInt64, value)
	}
	if value, ok := rcu.mutation.AddedChunkOffset(); ok {
		_spec.AddField(recvchunk.FieldChunkOffset, field.TypeInt64, value)
	}
	if value, ok := rcu.mutation.ChunkSize(); ok {
		_spec.SetField(recvchunk.FieldChunkSize, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.AddedChunkSize(); ok {
		_spec.AddField(recvchunk.FieldChunkSize, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.UpdatedAt(); ok {
		_spec.SetField(recvchunk.FieldUpdatedAt, field.TypeTime, value)
	}
	if rcu.mutation.RecvFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recvchunk.RecvFileTable,
			Columns: []string{recvchunk.RecvFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RecvFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recvchunk.RecvFileTable,
			Columns: []string{recvchunk.RecvFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recvchunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RecvChunkUpdateOne is the builder for updating a single RecvChunk entity.
type RecvChunkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecvChunkMutation
}

// SetRecvfileID sets the "recvfile_id" field.
func (rcuo *RecvChunkUpdateOne) SetRecvfileID(i int) *RecvChunkUpdateOne {
	rcuo.mutation.SetRecvfileID(i)
	return rcuo
}

// SetNillableRecvfileID sets the "recvfile_id" field if the given value is not nil.
func (rcuo *RecvChunkUpdateOne) SetNillableRecvfileID(i *int) *RecvChunkUpdateOne {
	if i != nil {
		rcuo.SetRecvfileID(*i)
	}
	return rcuo
}

// SetChunkIndex sets the "chunk_index" field.
func (rcuo *RecvChunkUpdateOne) SetChunkIndex(i int) *RecvChunkUpdateOne {
	rcuo.mutation.ResetChunkIndex()
	rcuo.mutation.SetChunkIndex(i)
	return rcuo
}

// SetNillableChunkIndex sets the "chunk_index" field if the given value is not nil.
func (rcuo *RecvChunkUpdateOne) SetNillableChunkIndex(i *int) *RecvChunkUpdateOne {
	if i != nil {
		rcuo.SetChunkIndex(*i)
	}
	return rcuo
}

// AddChunkIndex adds i to the "chunk_index" field.
func (rcuo *RecvChunkUpdateOne) AddChunkIndex(i int) *RecvChunkUpdateOne {
	rcuo.mutation.AddChunkIndex(i)
	return rcuo
}

// SetChunkOffset sets the "chunk_offset" field.
func (rcuo *RecvChunkUpdateOne) SetChunkOffset(i int64) *RecvChunkUpdateOne {
	rcuo.mutation.ResetChunkOffset()
	rcuo.mutation.SetChunkOffset(i)
	return rcuo
}

// SetNillableChunkOffset sets the "chunk_offset" field if the given value is not nil.
func (rcuo *RecvChunkUpdateOne) SetNillableChunkOffset(i *int64) *RecvChunkUpdateOne {
	if i != nil {
		rcuo.SetChunkOffset(*i)
	}
	return rcuo
}

// AddChunkOffset adds i to the "chunk_offset" field.
func (rcuo *RecvChunkUpdateOne) AddChunkOffset(i int64) *RecvChunkUpdateOne {
	rcuo.mutation.AddChunkOffset(i)
	return rcuo
}

// SetChunkSize sets the "chunk_size" field.
func (rcuo *RecvChunkUpdateOne) SetChunkSize(i int) *RecvChunkUpdateOne {
	rcuo.mutation.ResetChunkSize()
	rcuo.mutation.SetChunkSize(i)
	return rcuo
}

// SetNillableChunkSize sets the "chunk_size" field if the given value is not nil.
func (rcuo *RecvChunkUpdateOne) SetNillableChunkSize(i *int) *RecvChunkUpdateOne {
	if i != nil {
		rcuo.SetChunkSize(*i)
	}
	return rcuo
}

// AddChunkSize adds i to the "chunk_size" field.
func (rcuo *RecvChunkUpdateOne) AddChunkSize(i int) *RecvChunkUpdateOne {
	rcuo.mutation.AddChunkSize(i)
	return rcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rcuo *RecvChunkUpdateOne) SetUpdatedAt(t time.Time) *RecvChunkUpdateOne {
	rcuo.mutation.SetUpdatedAt(t)
	return rcuo
}

// SetRecvFileID sets the "recv_file" edge to the RecvFile entity by ID.
func (rcuo *RecvChunkUpdateOne) SetRecvFileID(id int) *RecvChunkUpdateOne {
	rcuo.mutation.SetRecvFileID(id)
	return rcuo
}

// SetRecvFile sets the "recv_file" edge to the RecvFile entity.
func (rcuo *RecvChunkUpdateOne) SetRecvFile(r *RecvFile) *RecvChunkUpdateOne {
	return rcuo.SetRecvFileID(r.ID)
}

// Mutation returns the RecvChunkMutation object of the builder.
func (rcuo *RecvChunkUpdateOne) Mutation() *RecvChunkMutation {
	return rcuo.mutation
}

// ClearRecvFile clears the "recv_file" edge to the RecvFile entity.
func (rcuo *RecvChunkUpdateOne) ClearRecvFile() *RecvChunkUpdateOne {
	rcuo.mutation.ClearRecvFile()
	return rcuo
}

// Where appends a list predicates to the RecvChunkUpdate builder.
func (rcuo *RecvChunkUpdateOne) Where(ps ...predicate.RecvChunk) *RecvChunkUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RecvChunkUpdateOne) Select(field string, fields ...string) *RecvChunkUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RecvChunk entity.
func (rcuo *RecvChunkUpdateOne) Save(ctx context.Context) (*RecvChunk, error) {
	rcuo.defaults()
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RecvChunkUpdateOne) SaveX(ctx context.Context) *RecvChunk {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RecvChunkUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RecvChunkUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcuo *RecvChunkUpdateOne) defaults() {
	if _, ok := rcuo.mutation.UpdatedAt(); !ok {
		v := recvchunk.UpdateDefaultUpdatedAt()
		rcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *RecvChunkUpdateOne) check() error {
	if rcuo.mutation.RecvFileCleared() && len(rcuo.mutation.RecvFileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RecvChunk.recv_file"`)
	}
	return nil
}

func (rcuo *RecvChunkUpdateOne) sqlSave(ctx context.Context) (_node *RecvChunk, err error) {
	if err := rcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(recvchunk.Table, recvchunk.Columns, sqlgraph.NewFieldSpec(recvchunk.FieldID, field.TypeInt))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecvChunk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recvchunk.FieldID)
		for _, f := range fields {
			if !recvchunk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recvchunk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.ChunkIndex(); ok {
		_spec.SetField(recvchunk.FieldChunkIndex, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.AddedChunkIndex(); ok {
		_spec.AddField(recvchunk.FieldChunkIndex, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.ChunkOffset(); ok {
		_spec.SetField(recvchunk.FieldChunkOffset, field.TypeInt64, value)
	}
	if value, ok := rcuo.mutation.AddedChunkOffset(); ok {
		_spec.AddField(recvchunk.FieldChunkOffset, field.TypeInt64, value)
	}
	if value, ok := rcuo.mutation.ChunkSize(); ok {
		_spec.SetField(recvchunk.FieldChunkSize, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.AddedChunkSize(); ok {
		_spec.AddField(recvchunk.FieldChunkSize, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(recvchunk.FieldUpdatedAt, field.TypeTime, value)
	}
	if rcuo.mutation.RecvFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recvchunk.RecvFileTable,
			Columns: []string{recvchunk.RecvFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RecvFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recvchunk.RecvFileTable,
			Columns: []string{recvchunk.RecvFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecvChunk{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recvchunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
