// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/infrastructure/repositories/ent/predicate"
	"github.com/shiqinfeng1/goframe-ddd/internal/infrastructure/repositories/ent/recvchunk"
	"github.com/shiqinfeng1/goframe-ddd/internal/infrastructure/repositories/ent/recvfile"
)

// RecvFileQuery is the builder for querying RecvFile entities.
type RecvFileQuery struct {
	config
	ctx            *QueryContext
	order          []recvfile.OrderOption
	inters         []Interceptor
	predicates     []predicate.RecvFile
	withRecvChunks *RecvChunkQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecvFileQuery builder.
func (rfq *RecvFileQuery) Where(ps ...predicate.RecvFile) *RecvFileQuery {
	rfq.predicates = append(rfq.predicates, ps...)
	return rfq
}

// Limit the number of records to be returned by this query.
func (rfq *RecvFileQuery) Limit(limit int) *RecvFileQuery {
	rfq.ctx.Limit = &limit
	return rfq
}

// Offset to start from.
func (rfq *RecvFileQuery) Offset(offset int) *RecvFileQuery {
	rfq.ctx.Offset = &offset
	return rfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rfq *RecvFileQuery) Unique(unique bool) *RecvFileQuery {
	rfq.ctx.Unique = &unique
	return rfq
}

// Order specifies how the records should be ordered.
func (rfq *RecvFileQuery) Order(o ...recvfile.OrderOption) *RecvFileQuery {
	rfq.order = append(rfq.order, o...)
	return rfq
}

// QueryRecvChunks chains the current query on the "recv_chunks" edge.
func (rfq *RecvFileQuery) QueryRecvChunks() *RecvChunkQuery {
	query := (&RecvChunkClient{config: rfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recvfile.Table, recvfile.FieldID, selector),
			sqlgraph.To(recvchunk.Table, recvchunk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recvfile.RecvChunksTable, recvfile.RecvChunksColumn),
		)
		fromU = sqlgraph.SetNeighbors(rfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecvFile entity from the query.
// Returns a *NotFoundError when no RecvFile was found.
func (rfq *RecvFileQuery) First(ctx context.Context) (*RecvFile, error) {
	nodes, err := rfq.Limit(1).All(setContextOp(ctx, rfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recvfile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rfq *RecvFileQuery) FirstX(ctx context.Context) *RecvFile {
	node, err := rfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecvFile ID from the query.
// Returns a *NotFoundError when no RecvFile ID was found.
func (rfq *RecvFileQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rfq.Limit(1).IDs(setContextOp(ctx, rfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recvfile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rfq *RecvFileQuery) FirstIDX(ctx context.Context) int {
	id, err := rfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecvFile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RecvFile entity is found.
// Returns a *NotFoundError when no RecvFile entities are found.
func (rfq *RecvFileQuery) Only(ctx context.Context) (*RecvFile, error) {
	nodes, err := rfq.Limit(2).All(setContextOp(ctx, rfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recvfile.Label}
	default:
		return nil, &NotSingularError{recvfile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rfq *RecvFileQuery) OnlyX(ctx context.Context) *RecvFile {
	node, err := rfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecvFile ID in the query.
// Returns a *NotSingularError when more than one RecvFile ID is found.
// Returns a *NotFoundError when no entities are found.
func (rfq *RecvFileQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rfq.Limit(2).IDs(setContextOp(ctx, rfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recvfile.Label}
	default:
		err = &NotSingularError{recvfile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rfq *RecvFileQuery) OnlyIDX(ctx context.Context) int {
	id, err := rfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecvFiles.
func (rfq *RecvFileQuery) All(ctx context.Context) ([]*RecvFile, error) {
	ctx = setContextOp(ctx, rfq.ctx, ent.OpQueryAll)
	if err := rfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RecvFile, *RecvFileQuery]()
	return withInterceptors[[]*RecvFile](ctx, rfq, qr, rfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rfq *RecvFileQuery) AllX(ctx context.Context) []*RecvFile {
	nodes, err := rfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecvFile IDs.
func (rfq *RecvFileQuery) IDs(ctx context.Context) (ids []int, err error) {
	if rfq.ctx.Unique == nil && rfq.path != nil {
		rfq.Unique(true)
	}
	ctx = setContextOp(ctx, rfq.ctx, ent.OpQueryIDs)
	if err = rfq.Select(recvfile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rfq *RecvFileQuery) IDsX(ctx context.Context) []int {
	ids, err := rfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rfq *RecvFileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rfq.ctx, ent.OpQueryCount)
	if err := rfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rfq, querierCount[*RecvFileQuery](), rfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rfq *RecvFileQuery) CountX(ctx context.Context) int {
	count, err := rfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rfq *RecvFileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rfq.ctx, ent.OpQueryExist)
	switch _, err := rfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rfq *RecvFileQuery) ExistX(ctx context.Context) bool {
	exist, err := rfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecvFileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rfq *RecvFileQuery) Clone() *RecvFileQuery {
	if rfq == nil {
		return nil
	}
	return &RecvFileQuery{
		config:         rfq.config,
		ctx:            rfq.ctx.Clone(),
		order:          append([]recvfile.OrderOption{}, rfq.order...),
		inters:         append([]Interceptor{}, rfq.inters...),
		predicates:     append([]predicate.RecvFile{}, rfq.predicates...),
		withRecvChunks: rfq.withRecvChunks.Clone(),
		// clone intermediate query.
		sql:  rfq.sql.Clone(),
		path: rfq.path,
	}
}

// WithRecvChunks tells the query-builder to eager-load the nodes that are connected to
// the "recv_chunks" edge. The optional arguments are used to configure the query builder of the edge.
func (rfq *RecvFileQuery) WithRecvChunks(opts ...func(*RecvChunkQuery)) *RecvFileQuery {
	query := (&RecvChunkClient{config: rfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rfq.withRecvChunks = query
	return rfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TaskID string `json:"task_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecvFile.Query().
//		GroupBy(recvfile.FieldTaskID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rfq *RecvFileQuery) GroupBy(field string, fields ...string) *RecvFileGroupBy {
	rfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RecvFileGroupBy{build: rfq}
	grbuild.flds = &rfq.ctx.Fields
	grbuild.label = recvfile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TaskID string `json:"task_id,omitempty"`
//	}
//
//	client.RecvFile.Query().
//		Select(recvfile.FieldTaskID).
//		Scan(ctx, &v)
func (rfq *RecvFileQuery) Select(fields ...string) *RecvFileSelect {
	rfq.ctx.Fields = append(rfq.ctx.Fields, fields...)
	sbuild := &RecvFileSelect{RecvFileQuery: rfq}
	sbuild.label = recvfile.Label
	sbuild.flds, sbuild.scan = &rfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RecvFileSelect configured with the given aggregations.
func (rfq *RecvFileQuery) Aggregate(fns ...AggregateFunc) *RecvFileSelect {
	return rfq.Select().Aggregate(fns...)
}

func (rfq *RecvFileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rfq); err != nil {
				return err
			}
		}
	}
	for _, f := range rfq.ctx.Fields {
		if !recvfile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rfq.path != nil {
		prev, err := rfq.path(ctx)
		if err != nil {
			return err
		}
		rfq.sql = prev
	}
	return nil
}

func (rfq *RecvFileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RecvFile, error) {
	var (
		nodes       = []*RecvFile{}
		_spec       = rfq.querySpec()
		loadedTypes = [1]bool{
			rfq.withRecvChunks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RecvFile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RecvFile{config: rfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rfq.withRecvChunks; query != nil {
		if err := rfq.loadRecvChunks(ctx, query, nodes,
			func(n *RecvFile) { n.Edges.RecvChunks = []*RecvChunk{} },
			func(n *RecvFile, e *RecvChunk) { n.Edges.RecvChunks = append(n.Edges.RecvChunks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rfq *RecvFileQuery) loadRecvChunks(ctx context.Context, query *RecvChunkQuery, nodes []*RecvFile, init func(*RecvFile), assign func(*RecvFile, *RecvChunk)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*RecvFile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(recvchunk.FieldRecvfileID)
	}
	query.Where(predicate.RecvChunk(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(recvfile.RecvChunksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RecvfileID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "recvfile_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rfq *RecvFileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rfq.querySpec()
	_spec.Node.Columns = rfq.ctx.Fields
	if len(rfq.ctx.Fields) > 0 {
		_spec.Unique = rfq.ctx.Unique != nil && *rfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rfq.driver, _spec)
}

func (rfq *RecvFileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(recvfile.Table, recvfile.Columns, sqlgraph.NewFieldSpec(recvfile.FieldID, field.TypeInt))
	_spec.From = rfq.sql
	if unique := rfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rfq.path != nil {
		_spec.Unique = true
	}
	if fields := rfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recvfile.FieldID)
		for i := range fields {
			if fields[i] != recvfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rfq *RecvFileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rfq.driver.Dialect())
	t1 := builder.Table(recvfile.Table)
	columns := rfq.ctx.Fields
	if len(columns) == 0 {
		columns = recvfile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rfq.sql != nil {
		selector = rfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rfq.ctx.Unique != nil && *rfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rfq.predicates {
		p(selector)
	}
	for _, p := range rfq.order {
		p(selector)
	}
	if offset := rfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecvFileGroupBy is the group-by builder for RecvFile entities.
type RecvFileGroupBy struct {
	selector
	build *RecvFileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rfgb *RecvFileGroupBy) Aggregate(fns ...AggregateFunc) *RecvFileGroupBy {
	rfgb.fns = append(rfgb.fns, fns...)
	return rfgb
}

// Scan applies the selector query and scans the result into the given value.
func (rfgb *RecvFileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rfgb.build.ctx, ent.OpQueryGroupBy)
	if err := rfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecvFileQuery, *RecvFileGroupBy](ctx, rfgb.build, rfgb, rfgb.build.inters, v)
}

func (rfgb *RecvFileGroupBy) sqlScan(ctx context.Context, root *RecvFileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rfgb.fns))
	for _, fn := range rfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rfgb.flds)+len(rfgb.fns))
		for _, f := range *rfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RecvFileSelect is the builder for selecting fields of RecvFile entities.
type RecvFileSelect struct {
	*RecvFileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rfs *RecvFileSelect) Aggregate(fns ...AggregateFunc) *RecvFileSelect {
	rfs.fns = append(rfs.fns, fns...)
	return rfs
}

// Scan applies the selector query and scans the result into the given value.
func (rfs *RecvFileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rfs.ctx, ent.OpQuerySelect)
	if err := rfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecvFileQuery, *RecvFileSelect](ctx, rfs.RecvFileQuery, rfs, rfs.inters, v)
}

func (rfs *RecvFileSelect) sqlScan(ctx context.Context, root *RecvFileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rfs.fns))
	for _, fn := range rfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
