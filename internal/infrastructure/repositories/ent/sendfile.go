// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shiqinfeng1/goframe-ddd/internal/infrastructure/repositories/ent/sendfile"
)

// SendFile is the model entity for the SendFile schema.
type SendFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID string `json:"task_id,omitempty"`
	// FilePath holds the value of the "file_path" field.
	FilePath string `json:"file_path,omitempty"`
	// FileID holds the value of the "file_id" field.
	FileID string `json:"file_id,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int64 `json:"file_size,omitempty"`
	// ChunkNumTotal holds the value of the "chunk_num_total" field.
	ChunkNumTotal int `json:"chunk_num_total,omitempty"`
	// ChunkNumSended holds the value of the "chunk_num_sended" field.
	ChunkNumSended int `json:"chunk_num_sended,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SendFileQuery when eager-loading is set.
	Edges        SendFileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SendFileEdges holds the relations/edges for other nodes in the graph.
type SendFileEdges struct {
	// SendChunks holds the value of the send_chunks edge.
	SendChunks []*SendChunk `json:"send_chunks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SendChunksOrErr returns the SendChunks value or an error if the edge
// was not loaded in eager-loading.
func (e SendFileEdges) SendChunksOrErr() ([]*SendChunk, error) {
	if e.loadedTypes[0] {
		return e.SendChunks, nil
	}
	return nil, &NotLoadedError{edge: "send_chunks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SendFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sendfile.FieldID, sendfile.FieldFileSize, sendfile.FieldChunkNumTotal, sendfile.FieldChunkNumSended, sendfile.FieldStatus:
			values[i] = new(sql.NullInt64)
		case sendfile.FieldTaskID, sendfile.FieldFilePath, sendfile.FieldFileID:
			values[i] = new(sql.NullString)
		case sendfile.FieldUpdatedAt, sendfile.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SendFile fields.
func (sf *SendFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sendfile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sf.ID = int(value.Int64)
		case sendfile.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				sf.TaskID = value.String
			}
		case sendfile.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				sf.FilePath = value.String
			}
		case sendfile.FieldFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				sf.FileID = value.String
			}
		case sendfile.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				sf.FileSize = value.Int64
			}
		case sendfile.FieldChunkNumTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chunk_num_total", values[i])
			} else if value.Valid {
				sf.ChunkNumTotal = int(value.Int64)
			}
		case sendfile.FieldChunkNumSended:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chunk_num_sended", values[i])
			} else if value.Valid {
				sf.ChunkNumSended = int(value.Int64)
			}
		case sendfile.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sf.Status = int(value.Int64)
			}
		case sendfile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sf.UpdatedAt = value.Time
			}
		case sendfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sf.CreatedAt = value.Time
			}
		default:
			sf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SendFile.
// This includes values selected through modifiers, order, etc.
func (sf *SendFile) Value(name string) (ent.Value, error) {
	return sf.selectValues.Get(name)
}

// QuerySendChunks queries the "send_chunks" edge of the SendFile entity.
func (sf *SendFile) QuerySendChunks() *SendChunkQuery {
	return NewSendFileClient(sf.config).QuerySendChunks(sf)
}

// Update returns a builder for updating this SendFile.
// Note that you need to call SendFile.Unwrap() before calling this method if this SendFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *SendFile) Update() *SendFileUpdateOne {
	return NewSendFileClient(sf.config).UpdateOne(sf)
}

// Unwrap unwraps the SendFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *SendFile) Unwrap() *SendFile {
	_tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("ent: SendFile is not a transactional entity")
	}
	sf.config.driver = _tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *SendFile) String() string {
	var builder strings.Builder
	builder.WriteString("SendFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sf.ID))
	builder.WriteString("task_id=")
	builder.WriteString(sf.TaskID)
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(sf.FilePath)
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(sf.FileID)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", sf.FileSize))
	builder.WriteString(", ")
	builder.WriteString("chunk_num_total=")
	builder.WriteString(fmt.Sprintf("%v", sf.ChunkNumTotal))
	builder.WriteString(", ")
	builder.WriteString("chunk_num_sended=")
	builder.WriteString(fmt.Sprintf("%v", sf.ChunkNumSended))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sf.Status))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sf.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SendFiles is a parsable slice of SendFile.
type SendFiles []*SendFile
