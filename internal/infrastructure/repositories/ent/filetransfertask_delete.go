// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shiqinfeng1/goframe-ddd/internal/infrastructure/repositories/ent/filetransfertask"
	"github.com/shiqinfeng1/goframe-ddd/internal/infrastructure/repositories/ent/predicate"
)

// FileTransferTaskDelete is the builder for deleting a FileTransferTask entity.
type FileTransferTaskDelete struct {
	config
	hooks    []Hook
	mutation *FileTransferTaskMutation
}

// Where appends a list predicates to the FileTransferTaskDelete builder.
func (fttd *FileTransferTaskDelete) Where(ps ...predicate.FileTransferTask) *FileTransferTaskDelete {
	fttd.mutation.Where(ps...)
	return fttd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fttd *FileTransferTaskDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fttd.sqlExec, fttd.mutation, fttd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fttd *FileTransferTaskDelete) ExecX(ctx context.Context) int {
	n, err := fttd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fttd *FileTransferTaskDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(filetransfertask.Table, sqlgraph.NewFieldSpec(filetransfertask.FieldID, field.TypeInt))
	if ps := fttd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fttd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fttd.mutation.done = true
	return affected, err
}

// FileTransferTaskDeleteOne is the builder for deleting a single FileTransferTask entity.
type FileTransferTaskDeleteOne struct {
	fttd *FileTransferTaskDelete
}

// Where appends a list predicates to the FileTransferTaskDelete builder.
func (fttdo *FileTransferTaskDeleteOne) Where(ps ...predicate.FileTransferTask) *FileTransferTaskDeleteOne {
	fttdo.fttd.mutation.Where(ps...)
	return fttdo
}

// Exec executes the deletion query.
func (fttdo *FileTransferTaskDeleteOne) Exec(ctx context.Context) error {
	n, err := fttdo.fttd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{filetransfertask.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fttdo *FileTransferTaskDeleteOne) ExecX(ctx context.Context) {
	if err := fttdo.Exec(ctx); err != nil {
		panic(err)
	}
}
