// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/os/gctx"
	"github.com/shiqinfeng1/goframe-ddd/internal/mgrid/application"
	"github.com/shiqinfeng1/goframe-ddd/internal/mgrid/application/service"
	"github.com/shiqinfeng1/goframe-ddd/internal/mgrid/infrastructure/repositories"
	"github.com/shiqinfeng1/goframe-ddd/internal/mgrid/server/http"
	"github.com/shiqinfeng1/goframe-ddd/internal/mgrid/server/pubsub"
	"github.com/shiqinfeng1/goframe-ddd/pkg/dockerctl/dockercmd"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func initApp(ctx context.Context) (application.Service, error) {
	logger := application.ProvideLogger()
	repository := repositories.NewPointmgrRepo()
	pointDataSetSrv := service.NewPointDataSetService(ctx, logger, repository)
	jetStreamSrv := service.NeJetStreamService(ctx, logger, repository)
	applicationService := application.New(ctx, pointDataSetSrv, jetStreamSrv)
	return applicationService, nil
}

func initServer() (*ghttp.Server, func(), error) {
	contextContext := ProvideCtx()
	logger := http.ProvideLogger()
	applicationService, err := app(contextContext)
	if err != nil {
		return nil, nil, err
	}
	dockerOps, err := dockercmd.New(contextContext)
	if err != nil {
		return nil, nil, err
	}
	server := http.NewHttpServer(contextContext, logger, applicationService, dockerOps)
	return server, func() {
	}, nil
}

func initSubOrConsume() (*pubsub.ControllerV1, func(), error) {
	logger := pubsub.ProvideLogger()
	contextContext := ProvideCtx()
	applicationService, err := app(contextContext)
	if err != nil {
		return nil, nil, err
	}
	string2 := pubsub.ProvideNatsServerAddr(contextContext)
	connFactory := pubsub.ProvideConnFactory(logger, string2)
	controllerV1 := pubsub.NewV1(logger, applicationService, string2, connFactory)
	return controllerV1, func() {
	}, nil
}

// wire.go:

// ProvideContext 提供 context.Context 实例
func ProvideCtx() context.Context {
	return gctx.New()
}

var appSrv application.Service

func app(ctx context.Context) (application.Service, error) {
	if appSrv == nil {
		return initApp(ctx)
	}
	return appSrv, nil
}
