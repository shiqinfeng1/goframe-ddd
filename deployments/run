#!/usr/bin/env bash

set -o errexit
set +o nounset
set -eo pipefail

ENV="${ENV:-prod}"
# 初始化颜色代码
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# 定义网络名称
readonly NETWORK_NAME="mgrid_network"
readonly APP_WATCHER_HOST=${APP_WATCHER_HOST:-'127.0.0.1'}
readonly APP_WATCHER_PORT=${APP_WATCHER_PORT:-'31083'}
# The root of the build/dist directory
APP_ROOT=$(dirname "${BASH_SOURCE[0]}")
readonly APP_BIN_DIR="${APP_ROOT}/artifacts/${OS}/${ARCH}" # 安装文件存放目录
# Linux root & going 用户密码
readonly LINUX_PASSWORD=${LINUX_PASSWORD:-'123456'}
# 不输入密码执行需要 root 权限的命令
function common::sudo {
  echo ${LINUX_PASSWORD} | sudo -S "$@"
}

log::info() {
  for message; do
    echo "${message}"
  done
}
log::error() {
  timestamp=$(date +"[%m%d %H:%M:%S]")
  echo "!!! ${timestamp} ${1-}" >&2
  shift
  for message; do
    echo "    ${message}" >&2
  done
}

# 加载环境变量
load_env() {
    source .env.${ENV}
    echo -e "${GREEN}current env:${NC}"
    echo -e "${GREEN}IMAGE_VERSION = ${IMAGE_VERSION}${NC}"
    echo -e "${GREEN}GO_IMAGE_NAME = ${GO_IMAGE_NAME}${NC}"
    echo -e "${GREEN}NATS_IMAGE_NAME = ${NATS_IMAGE_NAME}${NC}"
    echo -e "${GREEN}OS = ${OS}${NC}"
    echo -e "${GREEN}ARCH = ${ARCH}${NC}"

}

# 宿主机上安装watcher
function watcher::install()
{
  if systemctl status watcher| grep -q 'active'; then 
    log::info "watcher is already running, please shutdown first!"
    return 1
  fi

  pushd ${APP_ROOT} > /dev/null || return 1

  common::sudo cp ${APP_BIN_DIR}/watcher /usr/local/bin
  common::sudo cp ${APP_BIN_DIR}/watcher.service /etc/systemd/system/watcher.service
  ABS_BIN_DIR=$(realpath "$APP_ROOT")  # 获取绝对路径

  common::sudo sed -i "s|\${DATA_DIR}|$ABS_BIN_DIR|g" "/etc/systemd/system/watcher.service"    # 替换工作路径
  
  # 4. 启动-watcher 服务
  common::sudo systemctl daemon-reload
  common::sudo systemctl restart watcher
  common::sudo systemctl enable watcher
  watcher::status || return 1

  log::info "install watcher successfully"
  popd > /dev/null || return 1
}

# 宿主机上卸载watcher
function watcher::uninstall()
{
  set +o errexit
  common::sudo systemctl stop watcher
  common::sudo systemctl disable watcher
  common::sudo rm -f /usr/local/bin/watcher
  common::sudo rm -f /etc/systemd/system/watcher.service
  set -o errexit
  log::info "uninstall watcher successfully"
}

# 宿主机上watcher状态查看
function watcher::status()
{
  # 查看 watcher 运行状态，如果输出中包含 active (running) 字样说明 watcher 成功启动。
  systemctl status watcher|grep -q 'active' || {
    log::error "watcher failed to start, maybe not installed properly"
    return 1
  }

  # 监听端口在配置文件中是 hardcode
  if which ss &> /dev/null; then
    if ss -tuln | grep :${APP_WATCHER_PORT} &>/dev/null; then
      log::info "watcher is runnnng at ':${APP_WATCHER_PORT}'"
      return 0
    fi
  elif which nc &> /dev/null; then
    if nc -z -w 2 127.0.0.1 ${} &>/dev/null; then
      log::info "watcher is runnnng at ':${APP_WATCHER_PORT}'"
      return 0
    fi
  fi
  log::error "cannot access watcher port(:${APP_WATCHER_PORT}), watcher maybe not startup"
}

# 退出所有镜像
function app::up::all()
{
  app::up::nats()
  app::up::mgrid()
  app::up::watcher()
}
function app::down::all()
{
  app::down::nats()
  app::down::mgrid()
  app::down::watcher()

  if docker network inspect "$NETWORK_NAME" &>/dev/null; then
    log::info "remove network: $NETWORK_NAME"
    docker network remove "$NETWORK_NAME"
  fi
}
function app::up::nats()
{
  if ! docker network inspect "$NETWORK_NAME" &>/dev/null; then
    log::info "create network: $NETWORK_NAME"
    docker network create "$NETWORK_NAME"
  fi
  sudo mkdir -p ./running/data-nats
  sudo chown -R 1000:1000 ./running/data-nats
  sudo chmod -R 755 ./running/data-nats
  docker compose -f docker-compose.prod.yml up -d nats-server
  if [ ${ENV} = "dev" ]; then
    docker compose -f docker-compose.prod.yml up -d nats-box
  fi
}
function app::restart::nats()
{
  docker compose -f docker-compose.prod.yml down nats-server
  docker compose -f docker-compose.prod.yml up -d nats-server
  if [ ${ENV} = "dev" ]; then
    docker compose -f docker-compose.prod.yml down nats-box
    docker compose -f docker-compose.prod.yml up -d nats-box
  fi
}
function app::down::nats()
{
  docker compose -f docker-compose.prod.yml down nats-server
  if [ ${ENV} = "dev" ]; then
    docker compose -f docker-compose.prod.yml down ats-box
  fi
}

function app::up::mgrid()
{
  if ! docker network inspect "$NETWORK_NAME" &>/dev/null; then
    log::info "create network: $NETWORK_NAME"
    docker network create "$NETWORK_NAME"
  fi
   docker compose -f docker-compose.prod.yml up -d mgrid-server
}
function app::restart::mgrid()
{
  docker compose -f docker-compose.prod.yml down mgrid-server
  docker compose -f docker-compose.prod.yml up -d mgrid-server
}
function app::down::mgrid()
{
  docker compose -f docker-compose.prod.yml down mgrid-server
}
function app::up::watcher()
{
  watcher::install
}
function app::restart::watcher()
{
  watcher::uninstall
  watcher::install
}
function app::down::watcher()
{
  watcher::uninstall
}

if [[ "$*" =~ app:: ]];then
  eval $*
fi
