#!/usr/bin/env bash

set -o errexit
set +o nounset
set -eo pipefail

# 初始化颜色代码
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'


OS() {
  local host_os
  case "$(uname -s)" in
    Darwin)
      host_os=darwin
      ;;
    Linux)
      host_os=linux
      ;;
    *)
      log::error "Unsupported host OS.  Must be Linux or Mac OS X."
      exit 1
      ;;
  esac
  echo "${host_os}"
}

ARCH() {
  local host_arch
  case "$(uname -m)" in
    x86_64*)
      host_arch=amd64
      ;;
    i?86_64*)
      host_arch=amd64
      ;;
    amd64*)
      host_arch=amd64
      ;;
    aarch64*)
      host_arch=arm64
      ;;
    arm64*)
      host_arch=arm64
      ;;
    arm*)
      host_arch=arm
      ;;
    i?86*)
      host_arch=x86
      ;;
    *)
      log::error "Unsupported host arch. Must be x86_64, 386, arm, arm64."
      exit 1
      ;;
  esac
  echo "${host_arch}"
}


log::info() {
  for message; do
    echo "${message}"
  done
}
log::error() {
  timestamp=$(date +"[%m%d %H:%M:%S]")
  echo "!!! ${timestamp} ${1-}" >&2
  shift
  for message; do
    echo "    ${message}" >&2
  done
}

# 检查并删除镜像
remove_image() {
    local image_name=$1
    
    log::info "Checking if image '$image_name' exists..."
    
    # 检查镜像是否存在
    if docker image inspect "$image_name" &> /dev/null; then
        log::info "Image '$image_name' found. Removing..."
        
        # 删除镜像
        if docker rmi -f "$image_name" &> /dev/null; then
            log::info "Successfully removed image '$image_name'"
            return 0
        else
            log::error "Failed to remove image '$image_name'"
            return 1
        fi
    else
        log::info "Image '$image_name' does not exist. Skipping removal."
        return 0
    fi
}

# 加载镜像包
load_image() {
    local tar_file=$1
    
    log::info "Loading image from '$tar_file'..."
    
    # 检查文件是否存在
    if [ ! -f "$tar_file" ]; then
        log::error "Tar file '$tar_file' does not exist"
        return 1
    fi
    
    # 加载镜像
    if docker load -i "$tar_file" &> /dev/null; then
        log::info "Successfully loaded image from '$tar_file'"
        return 0
    else
        log::error "Failed to load image from '$tar_file'"
        return 1
    fi
}
# 检查镜像架构
check_image_architecture() {
    local image_name=$1
    local expected_arch=$2
    
    log::info "Checking architecture of image '$image_name'..."
    
    # 获取镜像架构
    local actual_arch=$(docker image inspect "$image_name" --format '{{.Architecture}}' 2>/dev/null)
    
    if [ $? -ne 0 ]; then
        log::error "Failed to inspect image '$image_name'"
        return 1
    fi
    
    log::info "Image architecture: $actual_arch"
    log::info "Expected architecture: $expected_arch"
    
    # 比较架构
    if [ "$actual_arch" = "$expected_arch" ]; then
        log::info "Architecture matches"
        return 0
    else
        log::error "Architecture mismatch! Expected '$expected_arch', got '$actual_arch'"
        return 1
    fi
}

# 检查服务是否正在运行
check_service_running() {
    local service_name=$1
    
    log::info "Check service '$service_name' status..."
    
    # 带密码检查
    if ! common::sudo systemctl is-active --quiet "$service_name"; then
        log::info "Service '$service_name' not running..."
        return 0  # 服务未运行，返回成功
    fi
    
    log::info "Service '$service_name' is running!"
    return 1  # 服务正在运行，返回失败
}

# 加载环境变量
source .env
#设置docker-compose.yml中使用的变量
export os=$(OS)
export arch=$(ARCH)
# 定义网络名称
readonly NETWORK_NAME="mgrid_network"
readonly APP_WATCHER_HOST=${APP_WATCHER_HOST:-'127.0.0.1'}
readonly APP_WATCHER_PORT=${APP_WATCHER_PORT:-'31083'}
# The root of the build/dist directory
APP_ROOT=$(dirname "${BASH_SOURCE[0]}")
# Linux root & going 用户密码
LINUX_PASSWORD=${LINUX_PASSWORD:-'ubuntu'}

# 不输入密码执行需要 root 权限的命令
function common::sudo {
  echo ${LINUX_PASSWORD} | sudo -S "$@"
}


ENV="${ENV:-prod}"
printf "${GREEN}+------------------------------------+\n${NC}"
printf "${GREEN}|CURRENT VARS:                       |\n${NC}"
printf "${GREEN}|\t%-16s = %-10s|\n${NC}" "ENV" "$ENV"
printf "${GREEN}|\t%-16s = %-10s|\n${NC}" "IMAGE_VERSION" "$IMAGE_VERSION"
printf "${GREEN}|\t%-16s = %-10s|\n${NC}" "OS" "$(OS)"
printf "${GREEN}|\t%-16s = %-10s|\n${NC}" "ARCH" "$(ARCH)"
printf "${GREEN}+------------------------------------+\n${NC}"

# 宿主机上安装watcher
function app::up::watcher()
{
  if ! check_service_running "watcher"; then
      log::info "watcher is already running, now shutdown!"
      app::down::watcher
  fi
  pushd ${APP_ROOT} > /dev/null || return 1

  common::sudo cp ${APP_ROOT}/artifacts/bin/$(OS)/$(ARCH)/watcher /usr/local/bin
  common::sudo cp ${APP_ROOT}/artifacts/watcher.service /etc/systemd/system/watcher.service
  ABS_BIN_DIR=$(realpath "$APP_ROOT")  # 获取绝对路径

  common::sudo sed -i "s|\${DATA_DIR}|$ABS_BIN_DIR|g" "/etc/systemd/system/watcher.service"    # 替换工作路径
  
  # 4. 启动-watcher 服务
  common::sudo systemctl daemon-reload
  common::sudo systemctl restart watcher
  common::sudo systemctl enable watcher
  app::status::watcher || return 1

  log::info "install watcher successfully"
  popd > /dev/null || return 1
}

# 宿主机上卸载watcher
function app::down::watcher()
{
  set +o errexit
  common::sudo systemctl stop watcher
  common::sudo systemctl disable watcher
  common::sudo rm -f /usr/local/bin/watcher
  common::sudo rm -f /etc/systemd/system/watcher.service
  set -o errexit
  log::info "uninstall watcher successfully"
}
function app::restart::watcher()
{
  app::down::watcher
  app::up::watcher
}
# 宿主机上watcher状态查看
function app::status::watcher()
{
  # 查看 watcher 运行状态，如果输出中包含 active (running) 字样说明 watcher 成功启动。
  systemctl status watcher|grep -q 'active' || {
    log::error "watcher is not started, maybe not installed properly"
    return 1
  }

  # 监听端口在配置文件中是 hardcode
  if which ss &> /dev/null; then
    if ss -tuln | grep :${APP_WATCHER_PORT} &>/dev/null; then
      log::info "watcher is runnnng at ':${APP_WATCHER_PORT}'"
      return 0
    fi
  elif which nc &> /dev/null; then
    if nc -z -w 2 127.0.0.1 ${} &>/dev/null; then
      log::info "watcher is runnnng at ':${APP_WATCHER_PORT}'"
      return 0
    fi
  fi
  log::error "cannot access watcher port(:${APP_WATCHER_PORT}), watcher maybe not startup"
}

function app::init::docker()
{
  ./install-docker-ubuntu2004.sh
}

# 退出所有镜像
function app::up::all()
{
  app::up::nats
  app::up::mgrid
  app::up::watcher
}
function app::down::all()
{
  app::down::nats
  app::down::mgrid
  app::down::watcher

  if docker network inspect "$NETWORK_NAME" &>/dev/null; then
    log::info "remove network: $NETWORK_NAME"
    docker network remove "$NETWORK_NAME"
  fi
}
function app::up::nats()
{
  local image_name="nats-for-mgrid:latest"
  local tar_file="./artifacts/bin/$(OS)/$(ARCH)/image-nats.tar"
  remove_image "$image_name" || {
      log::error "Aborting due to error in removing image: $image_name"
      exit 1
  }
  
  load_image "$tar_file" || {
      log::error "Aborting due to error in loading image: $image_name"
      exit 1
  }
  check_image_architecture "$image_name" "$(ARCH)" || {
      log::error "Aborting due to architecture mismatch of $image_name. Expect: $(ARCH)"
      exit 1
  }

  if ! docker network inspect "$NETWORK_NAME" &>/dev/null; then
    log::info "create network: $NETWORK_NAME"
    docker network create "$NETWORK_NAME"
  fi
  common::sudo mkdir -p ./running/data-nats ./running/log-nats
  common::sudo chown -R 1000:1000 ./running/data-nats ./running/log-nats
  common::sudo chmod -R 755 ./running/data-nats ./running/log-nats
  docker compose -f docker-compose.yml up -d nats-server
  if [ ${ENV} = "dev" ]; then
    load_image "./artifacts/bin/$(OS)/$(ARCH)/image-natsbox.tar" || {
      log::error "Aborting due to error in loading nats-box image"
      exit 1
    }
    docker compose -f docker-compose.yml up -d nats-box
  fi
}
function app::restart::nats()
{
  docker compose -f docker-compose.yml down nats-server
  docker compose -f docker-compose.yml up -d nats-server
}
function app::down::nats()
{
  docker compose -f docker-compose.yml down nats-server
  if [ ${ENV} = "dev" ]; then
    docker compose -f docker-compose.yml down nats-box
  fi
}

function app::up::mgrid()
{
  local image_name="debian12-for-mgrid:${IMAGE_VERSION}"
  local tar_file="./artifacts/bin/$(OS)/$(ARCH)/image-debian12.tar"
  remove_image "$image_name" || {
      log::error "Aborting due to error in removing image: $image_name"
      exit 1
  }
  
  load_image "$tar_file" || {
      log::error "Aborting due to error in loading image: $image_name"
      exit 1
  }
  check_image_architecture "$image_name" "$(ARCH)" || {
      log::error "Aborting due to architecture mismatch of $image_name. Expect: $(ARCH)"
      exit 1
  }

  if ! docker network inspect "$NETWORK_NAME" &>/dev/null; then
    log::info "create network: $NETWORK_NAME"
    docker network create "$NETWORK_NAME"
  fi
   docker compose -f docker-compose.yml up -d mgrid-server
}
function app::restart::mgrid()
{
  docker compose -f docker-compose.yml down mgrid-server
  docker compose -f docker-compose.yml up -d mgrid-server
}
function app::down::mgrid()
{
  docker compose -f docker-compose.yml down mgrid-server
}

# 验证参数格式是否符合 app::xx::xx
validate_command() {
    local cmd="$1"
    
    # 使用正则表达式验证格式
    # ^app::[a-zA-Z0-9_]+(::[a-zA-Z0-9_]+)+$
    # - 必须以 app:: 开头
    # - 中间至少有一个或多个 xx:: 格式的段
    # - xx 可以是字母、数字或下划线
    
    if [[ ! "$cmd" =~ ^app::[a-zA-Z0-9_]+(::[a-zA-Z0-9_]+)+$ ]]; then
        echo "Error: Invalid command format. Must be 'app::verb::modoule'."
        echo "Example: app::up::all"
        return 1
    fi
    
    return 0
}

# 主逻辑
if [ $# -eq 0 ]; then
    echo "Usage: $0 app::verb::modoule "
    exit 1
fi

# 提取命令部分（第一个参数）
command_part="$1"
shift

# 验证命令格式
if ! validate_command "$command_part"; then
    exit 1
fi

# 执行命令（将命令部分和剩余参数拼接）
echo "Executing: $command_part $*"
eval "$command_part $*"