// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go
//
// Generated by this command:
//
//	mockgen -destination=mock_client.go -package=nats -source=./interfaces.go ConnIntf,ConnectionManagerIntf,SubscriptionManagerIntf,StreamManagerIntf
//

// Package nats is a generated GoMock package.
package nats

import (
	context "context"
	reflect "reflect"

	nats "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	health "github.com/shiqinfeng1/goframe-ddd/pkg/health"
	pubsub "github.com/shiqinfeng1/goframe-ddd/pkg/pubsub"
	gomock "go.uber.org/mock/gomock"
)

// MockConnIntf is a mock of ConnIntf interface.
type MockConnIntf struct {
	ctrl     *gomock.Controller
	recorder *MockConnIntfMockRecorder
	isgomock struct{}
}

// MockConnIntfMockRecorder is the mock recorder for MockConnIntf.
type MockConnIntfMockRecorder struct {
	mock *MockConnIntf
}

// NewMockConnIntf creates a new mock instance.
func NewMockConnIntf(ctrl *gomock.Controller) *MockConnIntf {
	mock := &MockConnIntf{ctrl: ctrl}
	mock.recorder = &MockConnIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnIntf) EXPECT() *MockConnIntfMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnIntf) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnIntfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnIntf)(nil).Close))
}

// NewJetStream mocks base method.
func (m *MockConnIntf) NewJetStream() (jetstream.JetStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJetStream")
	ret0, _ := ret[0].(jetstream.JetStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJetStream indicates an expected call of NewJetStream.
func (mr *MockConnIntfMockRecorder) NewJetStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJetStream", reflect.TypeOf((*MockConnIntf)(nil).NewJetStream))
}

// Status mocks base method.
func (m *MockConnIntf) Status() nats.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(nats.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockConnIntfMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockConnIntf)(nil).Status))
}

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
	isgomock struct{}
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockConnector) Connect(arg0 string, arg1 ...nats.Option) (ConnIntf, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(ConnIntf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectorMockRecorder) Connect(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnector)(nil).Connect), varargs...)
}

// MockJetStreamCreator is a mock of JetStreamCreator interface.
type MockJetStreamCreator struct {
	ctrl     *gomock.Controller
	recorder *MockJetStreamCreatorMockRecorder
	isgomock struct{}
}

// MockJetStreamCreatorMockRecorder is the mock recorder for MockJetStreamCreator.
type MockJetStreamCreatorMockRecorder struct {
	mock *MockJetStreamCreator
}

// NewMockJetStreamCreator creates a new mock instance.
func NewMockJetStreamCreator(ctrl *gomock.Controller) *MockJetStreamCreator {
	mock := &MockJetStreamCreator{ctrl: ctrl}
	mock.recorder = &MockJetStreamCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJetStreamCreator) EXPECT() *MockJetStreamCreatorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockJetStreamCreator) New(conn ConnIntf) (jetstream.JetStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", conn)
	ret0, _ := ret[0].(jetstream.JetStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockJetStreamCreatorMockRecorder) New(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockJetStreamCreator)(nil).New), conn)
}

// MockConnectionManagerIntf is a mock of ConnectionManagerIntf interface.
type MockConnectionManagerIntf struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionManagerIntfMockRecorder
	isgomock struct{}
}

// MockConnectionManagerIntfMockRecorder is the mock recorder for MockConnectionManagerIntf.
type MockConnectionManagerIntfMockRecorder struct {
	mock *MockConnectionManagerIntf
}

// NewMockConnectionManagerIntf creates a new mock instance.
func NewMockConnectionManagerIntf(ctrl *gomock.Controller) *MockConnectionManagerIntf {
	mock := &MockConnectionManagerIntf{ctrl: ctrl}
	mock.recorder = &MockConnectionManagerIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionManagerIntf) EXPECT() *MockConnectionManagerIntfMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnectionManagerIntf) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockConnectionManagerIntfMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnectionManagerIntf)(nil).Close), ctx)
}

// Connect mocks base method.
func (m *MockConnectionManagerIntf) Connect(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect", ctx)
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectionManagerIntfMockRecorder) Connect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnectionManagerIntf)(nil).Connect), ctx)
}

// Health mocks base method.
func (m *MockConnectionManagerIntf) Health() *health.Health {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(*health.Health)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockConnectionManagerIntfMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockConnectionManagerIntf)(nil).Health))
}

// Publish mocks base method.
func (m *MockConnectionManagerIntf) Publish(ctx context.Context, subject string, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, subject, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockConnectionManagerIntfMockRecorder) Publish(ctx, subject, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockConnectionManagerIntf)(nil).Publish), ctx, subject, message)
}

// getJetStream mocks base method.
func (m *MockConnectionManagerIntf) getJetStream() (jetstream.JetStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getJetStream")
	ret0, _ := ret[0].(jetstream.JetStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getJetStream indicates an expected call of getJetStream.
func (mr *MockConnectionManagerIntfMockRecorder) getJetStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getJetStream", reflect.TypeOf((*MockConnectionManagerIntf)(nil).getJetStream))
}

// isConnected mocks base method.
func (m *MockConnectionManagerIntf) isConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isConnected indicates an expected call of isConnected.
func (mr *MockConnectionManagerIntfMockRecorder) isConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isConnected", reflect.TypeOf((*MockConnectionManagerIntf)(nil).isConnected))
}

// MockSubscriptionManagerIntf is a mock of SubscriptionManagerIntf interface.
type MockSubscriptionManagerIntf struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionManagerIntfMockRecorder
	isgomock struct{}
}

// MockSubscriptionManagerIntfMockRecorder is the mock recorder for MockSubscriptionManagerIntf.
type MockSubscriptionManagerIntfMockRecorder struct {
	mock *MockSubscriptionManagerIntf
}

// NewMockSubscriptionManagerIntf creates a new mock instance.
func NewMockSubscriptionManagerIntf(ctrl *gomock.Controller) *MockSubscriptionManagerIntf {
	mock := &MockSubscriptionManagerIntf{ctrl: ctrl}
	mock.recorder = &MockSubscriptionManagerIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionManagerIntf) EXPECT() *MockSubscriptionManagerIntfMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSubscriptionManagerIntf) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSubscriptionManagerIntfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubscriptionManagerIntf)(nil).Close))
}

// Subscribe mocks base method.
func (m *MockSubscriptionManagerIntf) Subscribe(ctx context.Context, topic string, js jetstream.JetStream, cfg *Config, handler pubsub.SubscribeFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topic, js, cfg, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionManagerIntfMockRecorder) Subscribe(ctx, topic, js, cfg, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionManagerIntf)(nil).Subscribe), ctx, topic, js, cfg, handler)
}

// MockStreamManagerIntf is a mock of StreamManagerIntf interface.
type MockStreamManagerIntf struct {
	ctrl     *gomock.Controller
	recorder *MockStreamManagerIntfMockRecorder
	isgomock struct{}
}

// MockStreamManagerIntfMockRecorder is the mock recorder for MockStreamManagerIntf.
type MockStreamManagerIntfMockRecorder struct {
	mock *MockStreamManagerIntf
}

// NewMockStreamManagerIntf creates a new mock instance.
func NewMockStreamManagerIntf(ctrl *gomock.Controller) *MockStreamManagerIntf {
	mock := &MockStreamManagerIntf{ctrl: ctrl}
	mock.recorder = &MockStreamManagerIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamManagerIntf) EXPECT() *MockStreamManagerIntfMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockStreamManagerIntf) CreateStream(ctx context.Context, cfg StreamConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockStreamManagerIntfMockRecorder) CreateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockStreamManagerIntf)(nil).CreateStream), ctx, cfg)
}

// DeleteStream mocks base method.
func (m *MockStreamManagerIntf) DeleteStream(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockStreamManagerIntfMockRecorder) DeleteStream(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockStreamManagerIntf)(nil).DeleteStream), ctx, name)
}
