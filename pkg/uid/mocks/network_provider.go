// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// NetworkProvider is an autogenerated mock type for the NetworkProvider type
type NetworkProvider struct {
	mock.Mock
}

type NetworkProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkProvider) EXPECT() *NetworkProvider_Expecter {
	return &NetworkProvider_Expecter{mock: &_m.Mock}
}

// InterfaceAddrs provides a mock function with given fields: i
func (_m *NetworkProvider) InterfaceAddrs(i net.Interface) ([]net.Addr, error) {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for InterfaceAddrs")
	}

	var r0 []net.Addr
	var r1 error
	if rf, ok := ret.Get(0).(func(net.Interface) ([]net.Addr, error)); ok {
		return rf(i)
	}
	if rf, ok := ret.Get(0).(func(net.Interface) []net.Addr); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.Addr)
		}
	}

	if rf, ok := ret.Get(1).(func(net.Interface) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkProvider_InterfaceAddrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InterfaceAddrs'
type NetworkProvider_InterfaceAddrs_Call struct {
	*mock.Call
}

// InterfaceAddrs is a helper method to define mock.On call
//   - i net.Interface
func (_e *NetworkProvider_Expecter) InterfaceAddrs(i interface{}) *NetworkProvider_InterfaceAddrs_Call {
	return &NetworkProvider_InterfaceAddrs_Call{Call: _e.mock.On("InterfaceAddrs", i)}
}

func (_c *NetworkProvider_InterfaceAddrs_Call) Run(run func(i net.Interface)) *NetworkProvider_InterfaceAddrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.Interface))
	})
	return _c
}

func (_c *NetworkProvider_InterfaceAddrs_Call) Return(_a0 []net.Addr, _a1 error) *NetworkProvider_InterfaceAddrs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkProvider_InterfaceAddrs_Call) RunAndReturn(run func(net.Interface) ([]net.Addr, error)) *NetworkProvider_InterfaceAddrs_Call {
	_c.Call.Return(run)
	return _c
}

// Interfaces provides a mock function with no fields
func (_m *NetworkProvider) Interfaces() ([]net.Interface, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Interfaces")
	}

	var r0 []net.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]net.Interface, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []net.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkProvider_Interfaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Interfaces'
type NetworkProvider_Interfaces_Call struct {
	*mock.Call
}

// Interfaces is a helper method to define mock.On call
func (_e *NetworkProvider_Expecter) Interfaces() *NetworkProvider_Interfaces_Call {
	return &NetworkProvider_Interfaces_Call{Call: _e.mock.On("Interfaces")}
}

func (_c *NetworkProvider_Interfaces_Call) Run(run func()) *NetworkProvider_Interfaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NetworkProvider_Interfaces_Call) Return(_a0 []net.Interface, _a1 error) *NetworkProvider_Interfaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkProvider_Interfaces_Call) RunAndReturn(run func() ([]net.Interface, error)) *NetworkProvider_Interfaces_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetworkProvider creates a new instance of NetworkProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkProvider {
	mock := &NetworkProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
