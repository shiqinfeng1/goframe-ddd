// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nats-io/nats.go/jetstream (interfaces: KeyValue,ObjectStore,JetStream,KeyValueEntry)
//
// Generated by this command:
//
//	mockgen -destination=mock_jetstream.go -package=natsclient github.com/nats-io/nats.go/jetstream KeyValue,ObjectStore,JetStream,KeyValueEntry
//

// Package natsclient is a generated GoMock package.
package natsclient

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	nats "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyValue is a mock of KeyValue interface.
type MockKeyValue struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueMockRecorder
	isgomock struct{}
}

// MockKeyValueMockRecorder is the mock recorder for MockKeyValue.
type MockKeyValueMockRecorder struct {
	mock *MockKeyValue
}

// NewMockKeyValue creates a new mock instance.
func NewMockKeyValue(ctrl *gomock.Controller) *MockKeyValue {
	mock := &MockKeyValue{ctrl: ctrl}
	mock.recorder = &MockKeyValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValue) EXPECT() *MockKeyValueMockRecorder {
	return m.recorder
}

// Bucket mocks base method.
func (m *MockKeyValue) Bucket() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket")
	ret0, _ := ret[0].(string)
	return ret0
}

// Bucket indicates an expected call of Bucket.
func (mr *MockKeyValueMockRecorder) Bucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockKeyValue)(nil).Bucket))
}

// Create mocks base method.
func (m *MockKeyValue) Create(ctx context.Context, key string, value []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, value)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockKeyValueMockRecorder) Create(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeyValue)(nil).Create), ctx, key, value)
}

// Delete mocks base method.
func (m *MockKeyValue) Delete(ctx context.Context, key string, opts ...jetstream.KVDeleteOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyValueMockRecorder) Delete(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyValue)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockKeyValue) Get(ctx context.Context, key string) (jetstream.KeyValueEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(jetstream.KeyValueEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValue)(nil).Get), ctx, key)
}

// GetRevision mocks base method.
func (m *MockKeyValue) GetRevision(ctx context.Context, key string, revision uint64) (jetstream.KeyValueEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", ctx, key, revision)
	ret0, _ := ret[0].(jetstream.KeyValueEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockKeyValueMockRecorder) GetRevision(ctx, key, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockKeyValue)(nil).GetRevision), ctx, key, revision)
}

// History mocks base method.
func (m *MockKeyValue) History(ctx context.Context, key string, opts ...jetstream.WatchOpt) ([]jetstream.KeyValueEntry, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "History", varargs...)
	ret0, _ := ret[0].([]jetstream.KeyValueEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockKeyValueMockRecorder) History(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockKeyValue)(nil).History), varargs...)
}

// Keys mocks base method.
func (m *MockKeyValue) Keys(ctx context.Context, opts ...jetstream.WatchOpt) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Keys", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockKeyValueMockRecorder) Keys(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockKeyValue)(nil).Keys), varargs...)
}

// ListKeys mocks base method.
func (m *MockKeyValue) ListKeys(ctx context.Context, opts ...jetstream.WatchOpt) (jetstream.KeyLister, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeys", varargs...)
	ret0, _ := ret[0].(jetstream.KeyLister)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockKeyValueMockRecorder) ListKeys(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockKeyValue)(nil).ListKeys), varargs...)
}

// ListKeysFiltered mocks base method.
func (m *MockKeyValue) ListKeysFiltered(ctx context.Context, filters ...string) (jetstream.KeyLister, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeysFiltered", varargs...)
	ret0, _ := ret[0].(jetstream.KeyLister)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeysFiltered indicates an expected call of ListKeysFiltered.
func (mr *MockKeyValueMockRecorder) ListKeysFiltered(ctx any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysFiltered", reflect.TypeOf((*MockKeyValue)(nil).ListKeysFiltered), varargs...)
}

// Purge mocks base method.
func (m *MockKeyValue) Purge(ctx context.Context, key string, opts ...jetstream.KVDeleteOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Purge", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockKeyValueMockRecorder) Purge(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockKeyValue)(nil).Purge), varargs...)
}

// PurgeDeletes mocks base method.
func (m *MockKeyValue) PurgeDeletes(ctx context.Context, opts ...jetstream.KVPurgeOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurgeDeletes", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeDeletes indicates an expected call of PurgeDeletes.
func (mr *MockKeyValueMockRecorder) PurgeDeletes(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeDeletes", reflect.TypeOf((*MockKeyValue)(nil).PurgeDeletes), varargs...)
}

// Put mocks base method.
func (m *MockKeyValue) Put(ctx context.Context, key string, value []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, key, value)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockKeyValueMockRecorder) Put(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyValue)(nil).Put), ctx, key, value)
}

// PutString mocks base method.
func (m *MockKeyValue) PutString(ctx context.Context, key, value string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutString", ctx, key, value)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutString indicates an expected call of PutString.
func (mr *MockKeyValueMockRecorder) PutString(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutString", reflect.TypeOf((*MockKeyValue)(nil).PutString), ctx, key, value)
}

// Status mocks base method.
func (m *MockKeyValue) Status(ctx context.Context) (jetstream.KeyValueStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(jetstream.KeyValueStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockKeyValueMockRecorder) Status(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockKeyValue)(nil).Status), ctx)
}

// Update mocks base method.
func (m *MockKeyValue) Update(ctx context.Context, key string, value []byte, revision uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, key, value, revision)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockKeyValueMockRecorder) Update(ctx, key, value, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeyValue)(nil).Update), ctx, key, value, revision)
}

// Watch mocks base method.
func (m *MockKeyValue) Watch(ctx context.Context, keys string, opts ...jetstream.WatchOpt) (jetstream.KeyWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keys}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(jetstream.KeyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockKeyValueMockRecorder) Watch(ctx, keys any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keys}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKeyValue)(nil).Watch), varargs...)
}

// WatchAll mocks base method.
func (m *MockKeyValue) WatchAll(ctx context.Context, opts ...jetstream.WatchOpt) (jetstream.KeyWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchAll", varargs...)
	ret0, _ := ret[0].(jetstream.KeyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAll indicates an expected call of WatchAll.
func (mr *MockKeyValueMockRecorder) WatchAll(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAll", reflect.TypeOf((*MockKeyValue)(nil).WatchAll), varargs...)
}

// WatchFiltered mocks base method.
func (m *MockKeyValue) WatchFiltered(ctx context.Context, keys []string, opts ...jetstream.WatchOpt) (jetstream.KeyWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keys}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchFiltered", varargs...)
	ret0, _ := ret[0].(jetstream.KeyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchFiltered indicates an expected call of WatchFiltered.
func (mr *MockKeyValueMockRecorder) WatchFiltered(ctx, keys any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keys}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchFiltered", reflect.TypeOf((*MockKeyValue)(nil).WatchFiltered), varargs...)
}

// MockObjectStore is a mock of ObjectStore interface.
type MockObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMockRecorder
	isgomock struct{}
}

// MockObjectStoreMockRecorder is the mock recorder for MockObjectStore.
type MockObjectStoreMockRecorder struct {
	mock *MockObjectStore
}

// NewMockObjectStore creates a new mock instance.
func NewMockObjectStore(ctrl *gomock.Controller) *MockObjectStore {
	mock := &MockObjectStore{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStore) EXPECT() *MockObjectStoreMockRecorder {
	return m.recorder
}

// AddBucketLink mocks base method.
func (m *MockObjectStore) AddBucketLink(ctx context.Context, name string, bucket jetstream.ObjectStore) (*jetstream.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBucketLink", ctx, name, bucket)
	ret0, _ := ret[0].(*jetstream.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBucketLink indicates an expected call of AddBucketLink.
func (mr *MockObjectStoreMockRecorder) AddBucketLink(ctx, name, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBucketLink", reflect.TypeOf((*MockObjectStore)(nil).AddBucketLink), ctx, name, bucket)
}

// AddLink mocks base method.
func (m *MockObjectStore) AddLink(ctx context.Context, name string, obj *jetstream.ObjectInfo) (*jetstream.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLink", ctx, name, obj)
	ret0, _ := ret[0].(*jetstream.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLink indicates an expected call of AddLink.
func (mr *MockObjectStoreMockRecorder) AddLink(ctx, name, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockObjectStore)(nil).AddLink), ctx, name, obj)
}

// Delete mocks base method.
func (m *MockObjectStore) Delete(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockObjectStoreMockRecorder) Delete(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockObjectStore)(nil).Delete), ctx, name)
}

// Get mocks base method.
func (m *MockObjectStore) Get(ctx context.Context, name string, opts ...jetstream.GetObjectOpt) (jetstream.ObjectResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(jetstream.ObjectResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockObjectStoreMockRecorder) Get(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockObjectStore)(nil).Get), varargs...)
}

// GetBytes mocks base method.
func (m *MockObjectStore) GetBytes(ctx context.Context, name string, opts ...jetstream.GetObjectOpt) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBytes", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockObjectStoreMockRecorder) GetBytes(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockObjectStore)(nil).GetBytes), varargs...)
}

// GetFile mocks base method.
func (m *MockObjectStore) GetFile(ctx context.Context, name, file string, opts ...jetstream.GetObjectOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, file}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFile", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFile indicates an expected call of GetFile.
func (mr *MockObjectStoreMockRecorder) GetFile(ctx, name, file any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, file}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockObjectStore)(nil).GetFile), varargs...)
}

// GetInfo mocks base method.
func (m *MockObjectStore) GetInfo(ctx context.Context, name string, opts ...jetstream.GetObjectInfoOpt) (*jetstream.ObjectInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInfo", varargs...)
	ret0, _ := ret[0].(*jetstream.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockObjectStoreMockRecorder) GetInfo(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockObjectStore)(nil).GetInfo), varargs...)
}

// GetString mocks base method.
func (m *MockObjectStore) GetString(ctx context.Context, name string, opts ...jetstream.GetObjectOpt) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetString", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockObjectStoreMockRecorder) GetString(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockObjectStore)(nil).GetString), varargs...)
}

// List mocks base method.
func (m *MockObjectStore) List(ctx context.Context, opts ...jetstream.ListObjectsOpt) ([]*jetstream.ObjectInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*jetstream.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockObjectStoreMockRecorder) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockObjectStore)(nil).List), varargs...)
}

// Put mocks base method.
func (m *MockObjectStore) Put(ctx context.Context, obj jetstream.ObjectMeta, reader io.Reader) (*jetstream.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, obj, reader)
	ret0, _ := ret[0].(*jetstream.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockObjectStoreMockRecorder) Put(ctx, obj, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockObjectStore)(nil).Put), ctx, obj, reader)
}

// PutBytes mocks base method.
func (m *MockObjectStore) PutBytes(ctx context.Context, name string, data []byte) (*jetstream.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBytes", ctx, name, data)
	ret0, _ := ret[0].(*jetstream.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBytes indicates an expected call of PutBytes.
func (mr *MockObjectStoreMockRecorder) PutBytes(ctx, name, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBytes", reflect.TypeOf((*MockObjectStore)(nil).PutBytes), ctx, name, data)
}

// PutFile mocks base method.
func (m *MockObjectStore) PutFile(ctx context.Context, file string) (*jetstream.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFile", ctx, file)
	ret0, _ := ret[0].(*jetstream.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFile indicates an expected call of PutFile.
func (mr *MockObjectStoreMockRecorder) PutFile(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFile", reflect.TypeOf((*MockObjectStore)(nil).PutFile), ctx, file)
}

// PutString mocks base method.
func (m *MockObjectStore) PutString(ctx context.Context, name, data string) (*jetstream.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutString", ctx, name, data)
	ret0, _ := ret[0].(*jetstream.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutString indicates an expected call of PutString.
func (mr *MockObjectStoreMockRecorder) PutString(ctx, name, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutString", reflect.TypeOf((*MockObjectStore)(nil).PutString), ctx, name, data)
}

// Seal mocks base method.
func (m *MockObjectStore) Seal(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Seal indicates an expected call of Seal.
func (mr *MockObjectStoreMockRecorder) Seal(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockObjectStore)(nil).Seal), ctx)
}

// Status mocks base method.
func (m *MockObjectStore) Status(ctx context.Context) (jetstream.ObjectStoreStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(jetstream.ObjectStoreStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockObjectStoreMockRecorder) Status(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockObjectStore)(nil).Status), ctx)
}

// UpdateMeta mocks base method.
func (m *MockObjectStore) UpdateMeta(ctx context.Context, name string, meta jetstream.ObjectMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeta", ctx, name, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeta indicates an expected call of UpdateMeta.
func (mr *MockObjectStoreMockRecorder) UpdateMeta(ctx, name, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeta", reflect.TypeOf((*MockObjectStore)(nil).UpdateMeta), ctx, name, meta)
}

// Watch mocks base method.
func (m *MockObjectStore) Watch(ctx context.Context, opts ...jetstream.WatchOpt) (jetstream.ObjectWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(jetstream.ObjectWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockObjectStoreMockRecorder) Watch(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockObjectStore)(nil).Watch), varargs...)
}

// MockJetStream is a mock of JetStream interface.
type MockJetStream struct {
	ctrl     *gomock.Controller
	recorder *MockJetStreamMockRecorder
	isgomock struct{}
}

// MockJetStreamMockRecorder is the mock recorder for MockJetStream.
type MockJetStreamMockRecorder struct {
	mock *MockJetStream
}

// NewMockJetStream creates a new mock instance.
func NewMockJetStream(ctrl *gomock.Controller) *MockJetStream {
	mock := &MockJetStream{ctrl: ctrl}
	mock.recorder = &MockJetStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJetStream) EXPECT() *MockJetStreamMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method.
func (m *MockJetStream) AccountInfo(ctx context.Context) (*jetstream.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", ctx)
	ret0, _ := ret[0].(*jetstream.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockJetStreamMockRecorder) AccountInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockJetStream)(nil).AccountInfo), ctx)
}

// CleanupPublisher mocks base method.
func (m *MockJetStream) CleanupPublisher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupPublisher")
}

// CleanupPublisher indicates an expected call of CleanupPublisher.
func (mr *MockJetStreamMockRecorder) CleanupPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupPublisher", reflect.TypeOf((*MockJetStream)(nil).CleanupPublisher))
}

// Conn mocks base method.
func (m *MockJetStream) Conn() *nats.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*nats.Conn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockJetStreamMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockJetStream)(nil).Conn))
}

// Consumer mocks base method.
func (m *MockJetStream) Consumer(ctx context.Context, stream, consumer string) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", ctx, stream, consumer)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer.
func (mr *MockJetStreamMockRecorder) Consumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockJetStream)(nil).Consumer), ctx, stream, consumer)
}

// CreateConsumer mocks base method.
func (m *MockJetStream) CreateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockJetStreamMockRecorder) CreateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockJetStream)(nil).CreateConsumer), ctx, stream, cfg)
}

// CreateKeyValue mocks base method.
func (m *MockJetStream) CreateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyValue indicates an expected call of CreateKeyValue.
func (mr *MockJetStreamMockRecorder) CreateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyValue", reflect.TypeOf((*MockJetStream)(nil).CreateKeyValue), ctx, cfg)
}

// CreateObjectStore mocks base method.
func (m *MockJetStream) CreateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectStore indicates an expected call of CreateObjectStore.
func (mr *MockJetStreamMockRecorder) CreateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectStore", reflect.TypeOf((*MockJetStream)(nil).CreateObjectStore), ctx, cfg)
}

// CreateOrUpdateConsumer mocks base method.
func (m *MockJetStream) CreateOrUpdateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateConsumer indicates an expected call of CreateOrUpdateConsumer.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateConsumer", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateConsumer), ctx, stream, cfg)
}

// CreateOrUpdateKeyValue mocks base method.
func (m *MockJetStream) CreateOrUpdateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateKeyValue indicates an expected call of CreateOrUpdateKeyValue.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateKeyValue", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateKeyValue), ctx, cfg)
}

// CreateOrUpdateObjectStore mocks base method.
func (m *MockJetStream) CreateOrUpdateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateObjectStore indicates an expected call of CreateOrUpdateObjectStore.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateObjectStore", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateObjectStore), ctx, cfg)
}

// CreateOrUpdateStream mocks base method.
func (m *MockJetStream) CreateOrUpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateStream indicates an expected call of CreateOrUpdateStream.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateStream", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateStream), ctx, cfg)
}

// CreateStream mocks base method.
func (m *MockJetStream) CreateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockJetStreamMockRecorder) CreateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockJetStream)(nil).CreateStream), ctx, cfg)
}

// DeleteConsumer mocks base method.
func (m *MockJetStream) DeleteConsumer(ctx context.Context, stream, consumer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", ctx, stream, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockJetStreamMockRecorder) DeleteConsumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockJetStream)(nil).DeleteConsumer), ctx, stream, consumer)
}

// DeleteKeyValue mocks base method.
func (m *MockJetStream) DeleteKeyValue(ctx context.Context, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyValue", ctx, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyValue indicates an expected call of DeleteKeyValue.
func (mr *MockJetStreamMockRecorder) DeleteKeyValue(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyValue", reflect.TypeOf((*MockJetStream)(nil).DeleteKeyValue), ctx, bucket)
}

// DeleteObjectStore mocks base method.
func (m *MockJetStream) DeleteObjectStore(ctx context.Context, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectStore", ctx, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectStore indicates an expected call of DeleteObjectStore.
func (mr *MockJetStreamMockRecorder) DeleteObjectStore(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectStore", reflect.TypeOf((*MockJetStream)(nil).DeleteObjectStore), ctx, bucket)
}

// DeleteStream mocks base method.
func (m *MockJetStream) DeleteStream(ctx context.Context, stream string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", ctx, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockJetStreamMockRecorder) DeleteStream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockJetStream)(nil).DeleteStream), ctx, stream)
}

// KeyValue mocks base method.
func (m *MockJetStream) KeyValue(ctx context.Context, bucket string) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValue", ctx, bucket)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyValue indicates an expected call of KeyValue.
func (mr *MockJetStreamMockRecorder) KeyValue(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValue", reflect.TypeOf((*MockJetStream)(nil).KeyValue), ctx, bucket)
}

// KeyValueStoreNames mocks base method.
func (m *MockJetStream) KeyValueStoreNames(ctx context.Context) jetstream.KeyValueNamesLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStoreNames", ctx)
	ret0, _ := ret[0].(jetstream.KeyValueNamesLister)
	return ret0
}

// KeyValueStoreNames indicates an expected call of KeyValueStoreNames.
func (mr *MockJetStreamMockRecorder) KeyValueStoreNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStoreNames", reflect.TypeOf((*MockJetStream)(nil).KeyValueStoreNames), ctx)
}

// KeyValueStores mocks base method.
func (m *MockJetStream) KeyValueStores(ctx context.Context) jetstream.KeyValueLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStores", ctx)
	ret0, _ := ret[0].(jetstream.KeyValueLister)
	return ret0
}

// KeyValueStores indicates an expected call of KeyValueStores.
func (mr *MockJetStreamMockRecorder) KeyValueStores(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStores", reflect.TypeOf((*MockJetStream)(nil).KeyValueStores), ctx)
}

// ListStreams mocks base method.
func (m *MockJetStream) ListStreams(arg0 context.Context, arg1 ...jetstream.StreamListOpt) jetstream.StreamInfoLister {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreams", varargs...)
	ret0, _ := ret[0].(jetstream.StreamInfoLister)
	return ret0
}

// ListStreams indicates an expected call of ListStreams.
func (mr *MockJetStreamMockRecorder) ListStreams(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreams", reflect.TypeOf((*MockJetStream)(nil).ListStreams), varargs...)
}

// ObjectStore mocks base method.
func (m *MockJetStream) ObjectStore(ctx context.Context, bucket string) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStore", ctx, bucket)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectStore indicates an expected call of ObjectStore.
func (mr *MockJetStreamMockRecorder) ObjectStore(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStore", reflect.TypeOf((*MockJetStream)(nil).ObjectStore), ctx, bucket)
}

// ObjectStoreNames mocks base method.
func (m *MockJetStream) ObjectStoreNames(ctx context.Context) jetstream.ObjectStoreNamesLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStoreNames", ctx)
	ret0, _ := ret[0].(jetstream.ObjectStoreNamesLister)
	return ret0
}

// ObjectStoreNames indicates an expected call of ObjectStoreNames.
func (mr *MockJetStreamMockRecorder) ObjectStoreNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStoreNames", reflect.TypeOf((*MockJetStream)(nil).ObjectStoreNames), ctx)
}

// ObjectStores mocks base method.
func (m *MockJetStream) ObjectStores(ctx context.Context) jetstream.ObjectStoresLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStores", ctx)
	ret0, _ := ret[0].(jetstream.ObjectStoresLister)
	return ret0
}

// ObjectStores indicates an expected call of ObjectStores.
func (mr *MockJetStreamMockRecorder) ObjectStores(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStores", reflect.TypeOf((*MockJetStream)(nil).ObjectStores), ctx)
}

// Options mocks base method.
func (m *MockJetStream) Options() jetstream.JetStreamOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(jetstream.JetStreamOptions)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockJetStreamMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockJetStream)(nil).Options))
}

// OrderedConsumer mocks base method.
func (m *MockJetStream) OrderedConsumer(ctx context.Context, stream string, cfg jetstream.OrderedConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderedConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderedConsumer indicates an expected call of OrderedConsumer.
func (mr *MockJetStreamMockRecorder) OrderedConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderedConsumer", reflect.TypeOf((*MockJetStream)(nil).OrderedConsumer), ctx, stream, cfg)
}

// Publish mocks base method.
func (m *MockJetStream) Publish(ctx context.Context, subject string, payload []byte, opts ...jetstream.PublishOpt) (*jetstream.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*jetstream.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockJetStreamMockRecorder) Publish(ctx, subject, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockJetStream)(nil).Publish), varargs...)
}

// PublishAsync mocks base method.
func (m *MockJetStream) PublishAsync(subject string, payload []byte, opts ...jetstream.PublishOpt) (jetstream.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []any{subject, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAsync", varargs...)
	ret0, _ := ret[0].(jetstream.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAsync indicates an expected call of PublishAsync.
func (mr *MockJetStreamMockRecorder) PublishAsync(subject, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subject, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsync", reflect.TypeOf((*MockJetStream)(nil).PublishAsync), varargs...)
}

// PublishAsyncComplete mocks base method.
func (m *MockJetStream) PublishAsyncComplete() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncComplete")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// PublishAsyncComplete indicates an expected call of PublishAsyncComplete.
func (mr *MockJetStreamMockRecorder) PublishAsyncComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncComplete", reflect.TypeOf((*MockJetStream)(nil).PublishAsyncComplete))
}

// PublishAsyncPending mocks base method.
func (m *MockJetStream) PublishAsyncPending() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncPending")
	ret0, _ := ret[0].(int)
	return ret0
}

// PublishAsyncPending indicates an expected call of PublishAsyncPending.
func (mr *MockJetStreamMockRecorder) PublishAsyncPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncPending", reflect.TypeOf((*MockJetStream)(nil).PublishAsyncPending))
}

// PublishMsg mocks base method.
func (m *MockJetStream) PublishMsg(ctx context.Context, msg *nats.Msg, opts ...jetstream.PublishOpt) (*jetstream.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMsg", varargs...)
	ret0, _ := ret[0].(*jetstream.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsg indicates an expected call of PublishMsg.
func (mr *MockJetStreamMockRecorder) PublishMsg(ctx, msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsg", reflect.TypeOf((*MockJetStream)(nil).PublishMsg), varargs...)
}

// PublishMsgAsync mocks base method.
func (m *MockJetStream) PublishMsgAsync(msg *nats.Msg, opts ...jetstream.PublishOpt) (jetstream.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMsgAsync", varargs...)
	ret0, _ := ret[0].(jetstream.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsgAsync indicates an expected call of PublishMsgAsync.
func (mr *MockJetStreamMockRecorder) PublishMsgAsync(msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsgAsync", reflect.TypeOf((*MockJetStream)(nil).PublishMsgAsync), varargs...)
}

// Stream mocks base method.
func (m *MockJetStream) Stream(ctx context.Context, stream string) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", ctx, stream)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockJetStreamMockRecorder) Stream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockJetStream)(nil).Stream), ctx, stream)
}

// StreamNameBySubject mocks base method.
func (m *MockJetStream) StreamNameBySubject(ctx context.Context, subject string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamNameBySubject", ctx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamNameBySubject indicates an expected call of StreamNameBySubject.
func (mr *MockJetStreamMockRecorder) StreamNameBySubject(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNameBySubject", reflect.TypeOf((*MockJetStream)(nil).StreamNameBySubject), ctx, subject)
}

// StreamNames mocks base method.
func (m *MockJetStream) StreamNames(arg0 context.Context, arg1 ...jetstream.StreamListOpt) jetstream.StreamNameLister {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamNames", varargs...)
	ret0, _ := ret[0].(jetstream.StreamNameLister)
	return ret0
}

// StreamNames indicates an expected call of StreamNames.
func (mr *MockJetStreamMockRecorder) StreamNames(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNames", reflect.TypeOf((*MockJetStream)(nil).StreamNames), varargs...)
}

// UpdateConsumer mocks base method.
func (m *MockJetStream) UpdateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockJetStreamMockRecorder) UpdateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockJetStream)(nil).UpdateConsumer), ctx, stream, cfg)
}

// UpdateKeyValue mocks base method.
func (m *MockJetStream) UpdateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeyValue indicates an expected call of UpdateKeyValue.
func (mr *MockJetStreamMockRecorder) UpdateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyValue", reflect.TypeOf((*MockJetStream)(nil).UpdateKeyValue), ctx, cfg)
}

// UpdateObjectStore mocks base method.
func (m *MockJetStream) UpdateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectStore indicates an expected call of UpdateObjectStore.
func (mr *MockJetStreamMockRecorder) UpdateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectStore", reflect.TypeOf((*MockJetStream)(nil).UpdateObjectStore), ctx, cfg)
}

// UpdateStream mocks base method.
func (m *MockJetStream) UpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockJetStreamMockRecorder) UpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockJetStream)(nil).UpdateStream), ctx, cfg)
}

// MockKeyValueEntry is a mock of KeyValueEntry interface.
type MockKeyValueEntry struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueEntryMockRecorder
	isgomock struct{}
}

// MockKeyValueEntryMockRecorder is the mock recorder for MockKeyValueEntry.
type MockKeyValueEntryMockRecorder struct {
	mock *MockKeyValueEntry
}

// NewMockKeyValueEntry creates a new mock instance.
func NewMockKeyValueEntry(ctrl *gomock.Controller) *MockKeyValueEntry {
	mock := &MockKeyValueEntry{ctrl: ctrl}
	mock.recorder = &MockKeyValueEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueEntry) EXPECT() *MockKeyValueEntryMockRecorder {
	return m.recorder
}

// Bucket mocks base method.
func (m *MockKeyValueEntry) Bucket() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket")
	ret0, _ := ret[0].(string)
	return ret0
}

// Bucket indicates an expected call of Bucket.
func (mr *MockKeyValueEntryMockRecorder) Bucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockKeyValueEntry)(nil).Bucket))
}

// Created mocks base method.
func (m *MockKeyValueEntry) Created() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Created")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Created indicates an expected call of Created.
func (mr *MockKeyValueEntryMockRecorder) Created() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockKeyValueEntry)(nil).Created))
}

// Delta mocks base method.
func (m *MockKeyValueEntry) Delta() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockKeyValueEntryMockRecorder) Delta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockKeyValueEntry)(nil).Delta))
}

// Key mocks base method.
func (m *MockKeyValueEntry) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockKeyValueEntryMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockKeyValueEntry)(nil).Key))
}

// Operation mocks base method.
func (m *MockKeyValueEntry) Operation() jetstream.KeyValueOp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operation")
	ret0, _ := ret[0].(jetstream.KeyValueOp)
	return ret0
}

// Operation indicates an expected call of Operation.
func (mr *MockKeyValueEntryMockRecorder) Operation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operation", reflect.TypeOf((*MockKeyValueEntry)(nil).Operation))
}

// Revision mocks base method.
func (m *MockKeyValueEntry) Revision() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revision")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Revision indicates an expected call of Revision.
func (mr *MockKeyValueEntryMockRecorder) Revision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revision", reflect.TypeOf((*MockKeyValueEntry)(nil).Revision))
}

// Value mocks base method.
func (m *MockKeyValueEntry) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockKeyValueEntryMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockKeyValueEntry)(nil).Value))
}
